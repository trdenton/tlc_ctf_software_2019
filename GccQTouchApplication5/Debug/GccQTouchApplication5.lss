
GccQTouchApplication5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001752  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00001752  000017e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007f  0080006e  0080006e  000017f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001824  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00001860  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018e2  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c2e  00000000  00000000  000032d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d8b  00000000  00000000  00003f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000300  00000000  00000000  00004c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000975  00000000  00000000  00004f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b04  00000000  00000000  00005901  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00006405  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
       2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
       4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
       6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
       8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
       a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
       c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
       e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
      10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
      12:	70 ca       	rjmp	.-2848   	; 0xfffff4f4 <__eeprom_end+0xff7ef4f4>
      14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
      16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
      18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
      1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
      1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
      1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
      20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
      22:	11 24       	eor	r1, r1
      24:	1f be       	out	0x3f, r1	; 63
      26:	cf e5       	ldi	r28, 0x5F	; 95
      28:	d2 e0       	ldi	r29, 0x02	; 2
      2a:	de bf       	out	0x3e, r29	; 62
      2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
      2e:	10 e0       	ldi	r17, 0x00	; 0
      30:	a0 e6       	ldi	r26, 0x60	; 96
      32:	b0 e0       	ldi	r27, 0x00	; 0
      34:	e2 e5       	ldi	r30, 0x52	; 82
      36:	f7 e1       	ldi	r31, 0x17	; 23
      38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
      3a:	05 90       	lpm	r0, Z+
      3c:	0d 92       	st	X+, r0
      3e:	ae 36       	cpi	r26, 0x6E	; 110
      40:	b1 07       	cpc	r27, r17
      42:	d9 f7       	brne	.-10     	; 0x3a <__CCP__+0x6>

00000044 <__do_clear_bss>:
      44:	20 e0       	ldi	r18, 0x00	; 0
      46:	ae e6       	ldi	r26, 0x6E	; 110
      48:	b0 e0       	ldi	r27, 0x00	; 0
      4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
      4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
      4e:	ad 3e       	cpi	r26, 0xED	; 237
      50:	b2 07       	cpc	r27, r18
      52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
      54:	37 d8       	rcall	.-3986   	; 0xfffff0c4 <__eeprom_end+0xff7ef0c4>
      56:	7b cb       	rjmp	.-2314   	; 0xfffff74e <__eeprom_end+0xff7ef74e>

00000058 <__bad_interrupt>:
      58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <_1101010101_>:

#if ((_STATIC_PORT_PIN_CONF_ == 1) && (QTOUCH_SNS_PORT_COUNT >= 1))

GLOBAL_FUNCTION _1101010101_
_1101010101_:
    push r19
      5a:	3f 93       	push	r19
    push r23
      5c:	7f 93       	push	r23
    push r25
      5e:	9f 93       	push	r25
    mov  r23, p_2
      60:	76 2f       	mov	r23, r22
    com  r23
      62:	70 95       	com	r23
    mov  r25, p_1
      64:	98 2f       	mov	r25, r24
    com  r25
      66:	90 95       	com	r25
    in   r19, REG( DDR, SNS1 )
      68:	3a b3       	in	r19, 0x1a	; 26
    and  r19, r25
      6a:	39 23       	and	r19, r25
    out  REG( DDR, SNS1 ), r19
      6c:	3a bb       	out	0x1a, r19	; 26
#if (_POWER_OPTIMIZATION_ == 1)
    sts  temp1, r19
#endif
    in   r19, REG( DDR, SNSK1 )
      6e:	3a b3       	in	r19, 0x1a	; 26
    and  r19, r23
      70:	37 23       	and	r19, r23
    out  REG( DDR, SNSK1 ), r19  
      72:	3a bb       	out	0x1a, r19	; 26
    in   r19, REG( PORT, SNS1 )
      74:	3b b3       	in	r19, 0x1b	; 27
    or   r19, p_1
      76:	38 2b       	or	r19, r24
    out  REG( PORT, SNS1 ), r19
      78:	3b bb       	out	0x1b, r19	; 27
    in   r19, REG( PORT, SNSK1 )
      7a:	3b b3       	in	r19, 0x1b	; 27
    and  r19, r23
      7c:	37 23       	and	r19, r23
    out  REG( PORT, SNSK1 ), r19
      7e:	3b bb       	out	0x1b, r19	; 27
    in   r19, REG( DDR, SNSK1 )
      80:	3a b3       	in	r19, 0x1a	; 26
#if (_POWER_OPTIMIZATION_ == 1)
    sts  temp1, r19
#endif
    or   r19, p_2
      82:	36 2b       	or	r19, r22
    out  REG( DDR, SNSK1 ), r19 
      84:	3a bb       	out	0x1a, r19	; 26
    pop  r25
      86:	9f 91       	pop	r25
    pop  r23
      88:	7f 91       	pop	r23
    pop  r19
      8a:	3f 91       	pop	r19
    ret
      8c:	08 95       	ret

0000008e <_1101010111_>:

#if (_POWER_OPTIMIZATION_ == 0)
GLOBAL_FUNCTION _1101010111_
_1101010111_:
    push r19
      8e:	3f 93       	push	r19
    push r23
      90:	7f 93       	push	r23
    push r25 
      92:	9f 93       	push	r25
    mov  r23, p_2
      94:	76 2f       	mov	r23, r22
    com  r23
      96:	70 95       	com	r23
    mov  r25, p_1
      98:	98 2f       	mov	r25, r24
    com  r25
      9a:	90 95       	com	r25
    in   r19, REG( DDR, SNSK1 )
      9c:	3a b3       	in	r19, 0x1a	; 26
    and  r23, r19
      9e:	73 23       	and	r23, r19
    out  REG( DDR, SNSK1 ), r23
      a0:	7a bb       	out	0x1a, r23	; 26
    in   r19, REG( DDR, SNS1 )
      a2:	3a b3       	in	r19, 0x1a	; 26
    or   r23, p_2
      a4:	76 2b       	or	r23, r22
    or   r19, p_1
      a6:	38 2b       	or	r19, r24
    and  r25, r19
      a8:	93 23       	and	r25, r19
    out  REG( DDR, SNS1 ), r19
      aa:	3a bb       	out	0x1a, r19	; 26
#elif ((QT_DELAY_CYCLES - 1) - (3 * ((QT_DELAY_CYCLES - 1)/3)) == 0)
    _11100011_
    _10100011_
    _01101001_
#elif ((QT_DELAY_CYCLES - 1) - (3 * ((QT_DELAY_CYCLES - 1)/3)) == 1)
    _11100011_
      ac:	3a e2       	ldi	r19, 0x2A	; 42

000000ae <_111_>:
    _10100011_
      ae:	3a 95       	dec	r19
    _01101001_
      b0:	f1 f7       	brne	.-4      	; 0xae <_111_>
    _00011001_
      b2:	00 00       	nop
    _10100011_
    _01101001_
    _00011001_
    _00011001_
#endif
    out  REG( DDR, SNS1 ), r25
      b4:	9a bb       	out	0x1a, r25	; 26
    out  REG( DDR, SNSK1 ), r23
      b6:	7a bb       	out	0x1a, r23	; 26
    pop  r25
      b8:	9f 91       	pop	r25
    in   r_v, REG( PIN, SNS1 )
      ba:	89 b3       	in	r24, 0x19	; 25
    and  r_v, p_3
      bc:	84 23       	and	r24, r20
    pop  r23
      be:	7f 91       	pop	r23
    pop  r19
      c0:	3f 91       	pop	r19
    ret
      c2:	08 95       	ret

000000c4 <_1101010110_>:
    ret
#endif

GLOBAL_FUNCTION _1101010110_
_1101010110_:
    push r19
      c4:	3f 93       	push	r19
    push r25 
      c6:	9f 93       	push	r25
    mov  r25, p_1
      c8:	98 2f       	mov	r25, r24
    com  r25
      ca:	90 95       	com	r25
    in   r19, REG( PORT, SNS1 )
      cc:	3b b3       	in	r19, 0x1b	; 27
    and  r19, r25
      ce:	39 23       	and	r19, r25
    out  REG( PORT, SNS1 ), r19
      d0:	3b bb       	out	0x1b, r19	; 27
    in   r19, REG( DDR, SNS1 )
      d2:	3a b3       	in	r19, 0x1a	; 26
    or   r19, p_1
      d4:	38 2b       	or	r19, r24
    out  REG( DDR, SNS1 ), r19
      d6:	3a bb       	out	0x1a, r19	; 26
    pop  r25
      d8:	9f 91       	pop	r25
    pop  r19
      da:	3f 91       	pop	r19
    ret
      dc:	08 95       	ret

000000de <burst_1_1_10_0_1>:
      de:	a1 e0       	ldi	r26, 0x01	; 1
      e0:	b0 e0       	ldi	r27, 0x00	; 0
      e2:	e4 e7       	ldi	r30, 0x74	; 116
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	d9 ca       	rjmp	.-2638   	; 0xfffff69a <__eeprom_end+0xff7ef69a>
      e8:	ff b6       	in	r15, 0x3f	; 63
      ea:	90 e8       	ldi	r25, 0x80	; 128
      ec:	f9 22       	and	r15, r25
      ee:	19 82       	std	Y+1, r1	; 0x01
      f0:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <__data_end>
      f4:	91 30       	cpi	r25, 0x01	; 1
      f6:	19 f0       	breq	.+6      	; 0xfe <burst_1_1_10_0_1+0x20>
      f8:	91 e0       	ldi	r25, 0x01	; 1
      fa:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__data_end>
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	2e eb       	ldi	r18, 0xBE	; 190
     102:	a2 2e       	mov	r10, r18
     104:	20 e0       	ldi	r18, 0x00	; 0
     106:	b2 2e       	mov	r11, r18
     108:	a8 0e       	add	r10, r24
     10a:	b9 1e       	adc	r11, r25
     10c:	f5 01       	movw	r30, r10
     10e:	d0 80       	ld	r13, Z
     110:	86 54       	subi	r24, 0x46	; 70
     112:	9f 4f       	sbci	r25, 0xFF	; 255
     114:	fc 01       	movw	r30, r24
     116:	c0 80       	ld	r12, Z
     118:	f8 94       	cli
     11a:	dd 20       	and	r13, r13
     11c:	09 f4       	brne	.+2      	; 0x120 <burst_1_1_10_0_1+0x42>
     11e:	a6 c0       	rjmp	.+332    	; 0x26c <__stack+0xd>
     120:	f5 01       	movw	r30, r10
     122:	80 81       	ld	r24, Z
     124:	cf df       	rcall	.-98     	; 0xc4 <_1101010110_>
     126:	8d 2d       	mov	r24, r13
     128:	6c 2d       	mov	r22, r12
     12a:	97 df       	rcall	.-210    	; 0x5a <_1101010101_>
     12c:	ed 2c       	mov	r14, r13
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	00 e0       	ldi	r16, 0x00	; 0
     132:	10 e0       	ldi	r17, 0x00	; 0
     134:	81 2c       	mov	r8, r1
     136:	90 e2       	ldi	r25, 0x20	; 32
     138:	99 2e       	mov	r9, r25
     13a:	15 ff       	sbrs	r17, 5
     13c:	07 c0       	rjmp	.+14     	; 0x14c <burst_1_1_10_0_1+0x6e>
     13e:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <SNS_array+0x1>
     142:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <SNS_array>
     146:	92 2b       	or	r25, r18
     148:	09 f5       	brne	.+66     	; 0x18c <burst_1_1_10_0_1+0xae>
     14a:	32 c0       	rjmp	.+100    	; 0x1b0 <burst_1_1_10_0_1+0xd2>
     14c:	8f b7       	in	r24, 0x3f	; 63
     14e:	8f 29       	or	r24, r15
     150:	8f bf       	out	0x3f, r24	; 63
     152:	00 00       	nop
     154:	f8 94       	cli
     156:	8d 2d       	mov	r24, r13
     158:	6c 2d       	mov	r22, r12
     15a:	4e 2d       	mov	r20, r14
     15c:	98 df       	rcall	.-208    	; 0x8e <_1101010111_>
     15e:	0f 5f       	subi	r16, 0xFF	; 255
     160:	1f 4f       	sbci	r17, 0xFF	; 255
     162:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     166:	9f 5f       	subi	r25, 0xFF	; 255
     168:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
     16c:	92 30       	cpi	r25, 0x02	; 2
     16e:	30 f0       	brcs	.+12     	; 0x17c <burst_1_1_10_0_1+0x9e>
     170:	92 30       	cpi	r25, 0x02	; 2
     172:	21 f0       	breq	.+8      	; 0x17c <burst_1_1_10_0_1+0x9e>
     174:	93 30       	cpi	r25, 0x03	; 3
     176:	11 f0       	breq	.+4      	; 0x17c <burst_1_1_10_0_1+0x9e>
     178:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     17c:	88 23       	and	r24, r24
     17e:	e9 f2       	breq	.-70     	; 0x13a <burst_1_1_10_0_1+0x5c>
     180:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <SNS_array+0x1>
     184:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <SNS_array>
     188:	92 2b       	or	r25, r18
     18a:	14 c0       	rjmp	.+40     	; 0x1b4 <burst_1_1_10_0_1+0xd6>
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	e0 fe       	sbrs	r14, 0
     190:	09 c0       	rjmp	.+18     	; 0x1a4 <burst_1_1_10_0_1+0xc6>
     192:	e2 2f       	mov	r30, r18
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	ee 0f       	add	r30, r30
     198:	ff 1f       	adc	r31, r31
     19a:	e9 58       	subi	r30, 0x89	; 137
     19c:	ff 4f       	sbci	r31, 0xFF	; 255
     19e:	91 82       	std	Z+1, r9	; 0x01
     1a0:	80 82       	st	Z, r8
     1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <burst_1_1_10_0_1+0xc8>
     1a4:	90 fd       	sbrc	r25, 0
     1a6:	2f 5f       	subi	r18, 0xFF	; 255
     1a8:	96 95       	lsr	r25
     1aa:	e6 94       	lsr	r14
     1ac:	99 23       	and	r25, r25
     1ae:	79 f7       	brne	.-34     	; 0x18e <burst_1_1_10_0_1+0xb0>
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	ee 24       	eor	r14, r14
     1b4:	2f b7       	in	r18, 0x3f	; 63
     1b6:	2f 29       	or	r18, r15
     1b8:	2f bf       	out	0x3f, r18	; 63
     1ba:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <m.1542>
     1be:	99 23       	and	r25, r25
     1c0:	d1 f1       	breq	.+116    	; 0x236 <burst_1_1_10_0_1+0x158>
     1c2:	ee 20       	and	r14, r14
     1c4:	c1 f1       	breq	.+112    	; 0x236 <burst_1_1_10_0_1+0x158>
     1c6:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <SNSK_array+0x1>
     1ca:	30 91 ba 00 	lds	r19, 0x00BA	; 0x8000ba <SNSK_array>
     1ce:	23 2b       	or	r18, r19
     1d0:	58 2f       	mov	r21, r24
     1d2:	30 e0       	ldi	r19, 0x00	; 0
     1d4:	70 e0       	ldi	r23, 0x00	; 0
     1d6:	60 e0       	ldi	r22, 0x00	; 0
     1d8:	40 e0       	ldi	r20, 0x00	; 0
     1da:	21 c0       	rjmp	.+66     	; 0x21e <burst_1_1_10_0_1+0x140>
     1dc:	50 ff       	sbrs	r21, 0
     1de:	18 c0       	rjmp	.+48     	; 0x210 <burst_1_1_10_0_1+0x132>
     1e0:	12 c0       	rjmp	.+36     	; 0x206 <burst_1_1_10_0_1+0x128>
     1e2:	20 ff       	sbrs	r18, 0
     1e4:	0f c0       	rjmp	.+30     	; 0x204 <burst_1_1_10_0_1+0x126>
     1e6:	46 17       	cp	r20, r22
     1e8:	61 f4       	brne	.+24     	; 0x202 <burst_1_1_10_0_1+0x124>
     1ea:	e3 2f       	mov	r30, r19
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	ee 0f       	add	r30, r30
     1f0:	ff 1f       	adc	r31, r31
     1f2:	e9 58       	subi	r30, 0x89	; 137
     1f4:	ff 4f       	sbci	r31, 0xFF	; 255
     1f6:	11 83       	std	Z+1, r17	; 0x01
     1f8:	00 83       	st	Z, r16
     1fa:	e5 2f       	mov	r30, r21
     1fc:	ee 7f       	andi	r30, 0xFE	; 254
     1fe:	31 f0       	breq	.+12     	; 0x20c <burst_1_1_10_0_1+0x12e>
     200:	08 c0       	rjmp	.+16     	; 0x212 <burst_1_1_10_0_1+0x134>
     202:	6f 5f       	subi	r22, 0xFF	; 255
     204:	26 95       	lsr	r18
     206:	22 23       	and	r18, r18
     208:	61 f7       	brne	.-40     	; 0x1e2 <burst_1_1_10_0_1+0x104>
     20a:	03 c0       	rjmp	.+6      	; 0x212 <burst_1_1_10_0_1+0x134>
     20c:	71 e0       	ldi	r23, 0x01	; 1
     20e:	01 c0       	rjmp	.+2      	; 0x212 <burst_1_1_10_0_1+0x134>
     210:	90 fd       	sbrc	r25, 0
     212:	4f 5f       	subi	r20, 0xFF	; 255
     214:	90 fd       	sbrc	r25, 0
     216:	3f 5f       	subi	r19, 0xFF	; 255
     218:	56 95       	lsr	r21
     21a:	96 95       	lsr	r25
     21c:	11 f0       	breq	.+4      	; 0x222 <burst_1_1_10_0_1+0x144>
     21e:	55 23       	and	r21, r21
     220:	e9 f6       	brne	.-70     	; 0x1dc <burst_1_1_10_0_1+0xfe>
     222:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <m.1542>
     226:	80 95       	com	r24
     228:	e8 22       	and	r14, r24
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	71 30       	cpi	r23, 0x01	; 1
     22e:	d1 f4       	brne	.+52     	; 0x264 <__stack+0x5>
     230:	ee 20       	and	r14, r14
     232:	b1 f0       	breq	.+44     	; 0x260 <__stack+0x1>
     234:	17 c0       	rjmp	.+46     	; 0x264 <__stack+0x5>
     236:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <SNS_array+0x1>
     23a:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <SNS_array>
     23e:	92 2b       	or	r25, r18
     240:	99 83       	std	Y+1, r25	; 0x01
     242:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <m.1542>
     246:	06 c0       	rjmp	.+12     	; 0x254 <burst_1_1_10_0_1+0x176>
     248:	29 81       	ldd	r18, Y+1	; 0x01
     24a:	20 fd       	sbrc	r18, 0
     24c:	9f 5f       	subi	r25, 0xFF	; 255
     24e:	29 81       	ldd	r18, Y+1	; 0x01
     250:	26 95       	lsr	r18
     252:	29 83       	std	Y+1, r18	; 0x01
     254:	29 81       	ldd	r18, Y+1	; 0x01
     256:	22 23       	and	r18, r18
     258:	b9 f7       	brne	.-18     	; 0x248 <burst_1_1_10_0_1+0x16a>
     25a:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <m.1542>
     25e:	02 c0       	rjmp	.+4      	; 0x264 <__stack+0x5>
     260:	00 e0       	ldi	r16, 0x00	; 0
     262:	10 e0       	ldi	r17, 0x00	; 0
     264:	f8 94       	cli
     266:	ee 20       	and	r14, r14
     268:	09 f0       	breq	.+2      	; 0x26c <__stack+0xd>
     26a:	67 cf       	rjmp	.-306    	; 0x13a <burst_1_1_10_0_1+0x5c>
     26c:	f5 01       	movw	r30, r10
     26e:	80 81       	ld	r24, Z
     270:	29 df       	rcall	.-430    	; 0xc4 <_1101010110_>
     272:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <temp_flag>
     276:	8f b7       	in	r24, 0x3f	; 63
     278:	8f 29       	or	r24, r15
     27a:	8f bf       	out	0x3f, r24	; 63
     27c:	21 96       	adiw	r28, 0x01	; 1
     27e:	ec e0       	ldi	r30, 0x0C	; 12
     280:	28 ca       	rjmp	.-2992   	; 0xfffff6d2 <__eeprom_end+0xff7ef6d2>

00000282 <qt_init_sensing_with_burst>:
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	8c 01       	movw	r16, r24
     28e:	eb 01       	movw	r28, r22
     290:	ff 24       	eor	r15, r15
     292:	03 c0       	rjmp	.+6      	; 0x29a <qt_init_sensing_with_burst+0x18>
     294:	8f 2d       	mov	r24, r15
     296:	50 d1       	rcall	.+672    	; 0x538 <start_cal_sensor>
     298:	f3 94       	inc	r15
     29a:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <num_sensors>
     29e:	f8 16       	cp	r15, r24
     2a0:	c8 f3       	brcs	.-14     	; 0x294 <qt_init_sensing_with_burst+0x12>
     2a2:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <time_of_last_call_ms+0x1>
     2a6:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <time_of_last_call_ms>
     2aa:	10 93 72 00 	sts	0x0072, r17	; 0x800072 <burst_proc+0x1>
     2ae:	00 93 71 00 	sts	0x0071, r16	; 0x800071 <burst_proc>
     2b2:	ce 01       	movw	r24, r28
     2b4:	d0 d3       	rcall	.+1952   	; 0xa56 <burst_init>
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	e5 e0       	ldi	r30, 0x05	; 5
     2bc:	11 ca       	rjmp	.-3038   	; 0xfffff6e0 <__eeprom_end+0xff7ef6e0>

000002be <qt_get_library_sig>:
     2be:	fc 01       	movw	r30, r24
     2c0:	80 e2       	ldi	r24, 0x20	; 32
     2c2:	9c e0       	ldi	r25, 0x0C	; 12
     2c4:	91 83       	std	Z+1, r25	; 0x01
     2c6:	80 83       	st	Z, r24
     2c8:	13 82       	std	Z+3, r1	; 0x03
     2ca:	12 82       	std	Z+2, r1	; 0x02
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	95 e0       	ldi	r25, 0x05	; 5
     2d0:	95 83       	std	Z+5, r25	; 0x05
     2d2:	84 83       	std	Z+4, r24	; 0x04
     2d4:	08 95       	ret

000002d6 <qt_calibrate_sensing>:
     2d6:	cf 93       	push	r28
     2d8:	c0 e0       	ldi	r28, 0x00	; 0
     2da:	03 c0       	rjmp	.+6      	; 0x2e2 <qt_calibrate_sensing+0xc>
     2dc:	8c 2f       	mov	r24, r28
     2de:	2c d1       	rcall	.+600    	; 0x538 <start_cal_sensor>
     2e0:	cf 5f       	subi	r28, 0xFF	; 255
     2e2:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <num_sensors>
     2e6:	c8 17       	cp	r28, r24
     2e8:	c8 f3       	brcs	.-14     	; 0x2dc <qt_calibrate_sensing+0x6>
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret

000002ee <qt_reset_sensing>:
     2ee:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <num_sensors>
     2f2:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <num_rotors_sliders>
     2f6:	84 e0       	ldi	r24, 0x04	; 4
     2f8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <qt_config_data+0x1>
     2fc:	84 e1       	ldi	r24, 0x14	; 20
     2fe:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <qt_config_data+0x4>
     302:	95 e0       	ldi	r25, 0x05	; 5
     304:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <qt_config_data+0x5>
     308:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <qt_config_data+0x3>
     30c:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <qt_config_data+0x2>
     310:	ea e8       	ldi	r30, 0x8A	; 138
     312:	f0 e0       	ldi	r31, 0x00	; 0
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	82 93       	st	-Z, r24
     318:	83 e0       	ldi	r24, 0x03	; 3
     31a:	86 83       	std	Z+6, r24	; 0x06
     31c:	a1 d3       	rcall	.+1858   	; 0xa60 <burst_reset>
     31e:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <qt_filter_callback+0x1>
     322:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <qt_filter_callback>
     326:	08 95       	ret

00000328 <qt_measure_sensors>:
     328:	1f 93       	push	r17
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
     32e:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <lib_status_flags+0x1>
     332:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <lib_status_flags>
     336:	40 91 90 00 	lds	r20, 0x0090	; 0x800090 <time_of_last_call_ms>
     33a:	50 91 91 00 	lds	r21, 0x0091	; 0x800091 <time_of_last_call_ms+0x1>
     33e:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <time_of_last_call_ms+0x1>
     342:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <time_of_last_call_ms>
     346:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <timer_prescale>
     34a:	30 91 93 00 	lds	r19, 0x0093	; 0x800093 <timer_prescale+0x1>
     34e:	24 1b       	sub	r18, r20
     350:	35 0b       	sbc	r19, r21
     352:	28 0f       	add	r18, r24
     354:	39 1f       	adc	r19, r25
     356:	c0 e0       	ldi	r28, 0x00	; 0
     358:	03 c0       	rjmp	.+6      	; 0x360 <qt_measure_sensors+0x38>
     35a:	28 5c       	subi	r18, 0xC8	; 200
     35c:	30 40       	sbci	r19, 0x00	; 0
     35e:	cf 5f       	subi	r28, 0xFF	; 255
     360:	28 3c       	cpi	r18, 0xC8	; 200
     362:	31 05       	cpc	r19, r1
     364:	d0 f7       	brcc	.-12     	; 0x35a <qt_measure_sensors+0x32>
     366:	30 93 93 00 	sts	0x0093, r19	; 0x800093 <timer_prescale+0x1>
     36a:	20 93 92 00 	sts	0x0092, r18	; 0x800092 <timer_prescale>
     36e:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <dht_counter>
     372:	88 23       	and	r24, r24
     374:	41 f0       	breq	.+16     	; 0x386 <qt_measure_sensors+0x5e>
     376:	8c 17       	cp	r24, r28
     378:	18 f4       	brcc	.+6      	; 0x380 <qt_measure_sensors+0x58>
     37a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <dht_counter>
     37e:	03 c0       	rjmp	.+6      	; 0x386 <qt_measure_sensors+0x5e>
     380:	8c 1b       	sub	r24, r28
     382:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <dht_counter>
     386:	7d d3       	rcall	.+1786   	; 0xa82 <burst>
     388:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <qt_filter_callback>
     38c:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <qt_filter_callback+0x1>
     390:	30 97       	sbiw	r30, 0x00	; 0
     392:	09 f0       	breq	.+2      	; 0x396 <qt_measure_sensors+0x6e>
     394:	09 95       	icall
     396:	10 e0       	ldi	r17, 0x00	; 0
     398:	d0 e0       	ldi	r29, 0x00	; 0
     39a:	05 c0       	rjmp	.+10     	; 0x3a6 <qt_measure_sensors+0x7e>
     39c:	8d 2f       	mov	r24, r29
     39e:	6c 2f       	mov	r22, r28
     3a0:	dd d0       	rcall	.+442    	; 0x55c <process_sensor>
     3a2:	18 2b       	or	r17, r24
     3a4:	df 5f       	subi	r29, 0xFF	; 255
     3a6:	50 91 95 00 	lds	r21, 0x0095	; 0x800095 <num_sensors>
     3aa:	d5 17       	cp	r29, r21
     3ac:	b8 f3       	brcs	.-18     	; 0x39c <qt_measure_sensors+0x74>
     3ae:	11 23       	and	r17, r17
     3b0:	49 f0       	breq	.+18     	; 0x3c4 <qt_measure_sensors+0x9c>
     3b2:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <lib_status_flags>
     3b6:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <lib_status_flags+0x1>
     3ba:	91 60       	ori	r25, 0x01	; 1
     3bc:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <lib_status_flags+0x1>
     3c0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <lib_status_flags>
     3c4:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <qt_measure_data+0x10>
     3c8:	a6 e9       	ldi	r26, 0x96	; 150
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	40 e0       	ldi	r20, 0x00	; 0
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	18 c0       	rjmp	.+48     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3d4:	2c 91       	ld	r18, X
     3d6:	28 71       	andi	r18, 0x18	; 24
     3d8:	99 f0       	breq	.+38     	; 0x400 <__LOCK_REGION_LENGTH__>
     3da:	e4 2f       	mov	r30, r20
     3dc:	e6 95       	lsr	r30
     3de:	e6 95       	lsr	r30
     3e0:	e6 95       	lsr	r30
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	e9 58       	subi	r30, 0x89	; 137
     3e6:	ff 4f       	sbci	r31, 0xFF	; 255
     3e8:	24 2f       	mov	r18, r20
     3ea:	27 70       	andi	r18, 0x07	; 7
     3ec:	bc 01       	movw	r22, r24
     3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <qt_measure_sensors+0xcc>
     3f0:	66 0f       	add	r22, r22
     3f2:	77 1f       	adc	r23, r23
     3f4:	2a 95       	dec	r18
     3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <qt_measure_sensors+0xc8>
     3f8:	9b 01       	movw	r18, r22
     3fa:	30 89       	ldd	r19, Z+16	; 0x10
     3fc:	32 2b       	or	r19, r18
     3fe:	30 8b       	std	Z+16, r19	; 0x10
     400:	4f 5f       	subi	r20, 0xFF	; 255
     402:	18 96       	adiw	r26, 0x08	; 8
     404:	45 17       	cp	r20, r21
     406:	31 f7       	brne	.-52     	; 0x3d4 <qt_measure_sensors+0xac>
     408:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <lib_status_flags>
     40c:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <lib_status_flags+0x1>
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	1f 91       	pop	r17
     416:	08 95       	ret

00000418 <qt_enable_key>:
     418:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <num_sensors>
     41c:	e9 2f       	mov	r30, r25
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	33 e0       	ldi	r19, 0x03	; 3
     422:	ee 0f       	add	r30, r30
     424:	ff 1f       	adc	r31, r31
     426:	3a 95       	dec	r19
     428:	e1 f7       	brne	.-8      	; 0x422 <qt_enable_key+0xa>
     42a:	ea 56       	subi	r30, 0x6A	; 106
     42c:	ff 4f       	sbci	r31, 0xFF	; 255
     42e:	43 83       	std	Z+3, r20	; 0x03
     430:	67 70       	andi	r22, 0x07	; 7
     432:	85 83       	std	Z+5, r24	; 0x05
     434:	86 83       	std	Z+6, r24	; 0x06
     436:	23 70       	andi	r18, 0x03	; 3
     438:	66 0f       	add	r22, r22
     43a:	66 0f       	add	r22, r22
     43c:	66 0f       	add	r22, r22
     43e:	26 2b       	or	r18, r22
     440:	24 83       	std	Z+4, r18	; 0x04
     442:	9f 5f       	subi	r25, 0xFF	; 255
     444:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <num_sensors>
     448:	08 95       	ret

0000044a <qt_get_sensor_delta>:
     44a:	a1 e0       	ldi	r26, 0x01	; 1
     44c:	b0 e0       	ldi	r27, 0x00	; 0
     44e:	ea e2       	ldi	r30, 0x2A	; 42
     450:	f2 e0       	ldi	r31, 0x02	; 2
     452:	29 c9       	rjmp	.-3502   	; 0xfffff6a6 <__eeprom_end+0xff7ef6a6>
     454:	08 2f       	mov	r16, r24
     456:	10 e0       	ldi	r17, 0x00	; 0
     458:	63 e0       	ldi	r22, 0x03	; 3
     45a:	00 0f       	add	r16, r16
     45c:	11 1f       	adc	r17, r17
     45e:	6a 95       	dec	r22
     460:	e1 f7       	brne	.-8      	; 0x45a <qt_get_sensor_delta+0x10>
     462:	f8 01       	movw	r30, r16
     464:	ea 56       	subi	r30, 0x6A	; 106
     466:	ff 4f       	sbci	r31, 0xFF	; 255
     468:	65 81       	ldd	r22, Z+5	; 0x05
     46a:	43 81       	ldd	r20, Z+3	; 0x03
     46c:	50 e0       	ldi	r21, 0x00	; 0
     46e:	00 90 89 00 	lds	r0, 0x0089	; 0x800089 <qt_config_data>
     472:	02 c0       	rjmp	.+4      	; 0x478 <qt_get_sensor_delta+0x2e>
     474:	55 95       	asr	r21
     476:	47 95       	ror	r20
     478:	0a 94       	dec	r0
     47a:	e2 f7       	brpl	.-8      	; 0x474 <qt_get_sensor_delta+0x2a>
     47c:	44 30       	cpi	r20, 0x04	; 4
     47e:	08 f4       	brcc	.+2      	; 0x482 <qt_get_sensor_delta+0x38>
     480:	44 e0       	ldi	r20, 0x04	; 4
     482:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <num_sensors>
     486:	89 17       	cp	r24, r25
     488:	78 f5       	brcc	.+94     	; 0x4e8 <qt_get_sensor_delta+0x9e>
     48a:	56 e9       	ldi	r21, 0x96	; 150
     48c:	e5 2e       	mov	r14, r21
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	f5 2e       	mov	r15, r21
     492:	e0 0e       	add	r14, r16
     494:	f1 1e       	adc	r15, r17
     496:	f7 01       	movw	r30, r14
     498:	94 81       	ldd	r25, Z+4	; 0x04
     49a:	29 2f       	mov	r18, r25
     49c:	20 7c       	andi	r18, 0xC0	; 192
     49e:	f9 f4       	brne	.+62     	; 0x4de <qt_get_sensor_delta+0x94>
     4a0:	86 2f       	mov	r24, r22
     4a2:	49 83       	std	Y+1, r20	; 0x01
     4a4:	c2 d2       	rcall	.+1412   	; 0xa2a <get_channel_delta>
     4a6:	49 81       	ldd	r20, Y+1	; 0x01
     4a8:	24 2f       	mov	r18, r20
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	46 95       	lsr	r20
     4ae:	46 95       	lsr	r20
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	42 1b       	sub	r20, r18
     4b4:	53 0b       	sbc	r21, r19
     4b6:	48 17       	cp	r20, r24
     4b8:	59 07       	cpc	r21, r25
     4ba:	24 f4       	brge	.+8      	; 0x4c4 <qt_get_sensor_delta+0x7a>
     4bc:	f7 01       	movw	r30, r14
     4be:	44 81       	ldd	r20, Z+4	; 0x04
     4c0:	4b 7f       	andi	r20, 0xFB	; 251
     4c2:	44 83       	std	Z+4, r20	; 0x04
     4c4:	30 95       	com	r19
     4c6:	21 95       	neg	r18
     4c8:	3f 4f       	sbci	r19, 0xFF	; 255
     4ca:	28 17       	cp	r18, r24
     4cc:	39 07       	cpc	r19, r25
     4ce:	74 f0       	brlt	.+28     	; 0x4ec <qt_get_sensor_delta+0xa2>
     4d0:	f8 01       	movw	r30, r16
     4d2:	ea 56       	subi	r30, 0x6A	; 106
     4d4:	ff 4f       	sbci	r31, 0xFF	; 255
     4d6:	24 81       	ldd	r18, Z+4	; 0x04
     4d8:	24 60       	ori	r18, 0x04	; 4
     4da:	24 83       	std	Z+4, r18	; 0x04
     4dc:	07 c0       	rjmp	.+14     	; 0x4ec <qt_get_sensor_delta+0xa2>
     4de:	9b 7f       	andi	r25, 0xFB	; 251
     4e0:	f7 01       	movw	r30, r14
     4e2:	94 83       	std	Z+4, r25	; 0x04
     4e4:	f3 d3       	rcall	.+2022   	; 0xccc <calc_rotor_slider_sensor_delta>
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <qt_get_sensor_delta+0xa2>
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	21 96       	adiw	r28, 0x01	; 1
     4ee:	e6 e0       	ldi	r30, 0x06	; 6
     4f0:	f6 c8       	rjmp	.-3604   	; 0xfffff6de <__eeprom_end+0xff7ef6de>

000004f2 <goto_no_detect>:
     4f2:	e8 2f       	mov	r30, r24
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	83 e0       	ldi	r24, 0x03	; 3
     4f8:	ee 0f       	add	r30, r30
     4fa:	ff 1f       	adc	r31, r31
     4fc:	8a 95       	dec	r24
     4fe:	e1 f7       	brne	.-8      	; 0x4f8 <goto_no_detect+0x6>
     500:	ea 56       	subi	r30, 0x6A	; 106
     502:	ff 4f       	sbci	r31, 0xFF	; 255
     504:	25 81       	ldd	r18, Z+5	; 0x05
     506:	36 81       	ldd	r19, Z+6	; 0x06
     508:	82 e0       	ldi	r24, 0x02	; 2
     50a:	80 83       	st	Z, r24
     50c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <lib_status_flags>
     510:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <lib_status_flags+0x1>
     514:	82 60       	ori	r24, 0x02	; 2
     516:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <lib_status_flags+0x1>
     51a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <lib_status_flags>
     51e:	12 82       	std	Z+2, r1	; 0x02
     520:	82 2f       	mov	r24, r18
     522:	90 e8       	ldi	r25, 0x80	; 128
     524:	06 c0       	rjmp	.+12     	; 0x532 <goto_no_detect+0x40>
     526:	e8 2f       	mov	r30, r24
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	ea 54       	subi	r30, 0x4A	; 74
     52c:	ff 4f       	sbci	r31, 0xFF	; 255
     52e:	90 83       	st	Z, r25
     530:	8f 5f       	subi	r24, 0xFF	; 255
     532:	38 17       	cp	r19, r24
     534:	c0 f7       	brcc	.-16     	; 0x526 <goto_no_detect+0x34>
     536:	08 95       	ret

00000538 <start_cal_sensor>:
     538:	cf 93       	push	r28
     53a:	c8 2f       	mov	r28, r24
     53c:	da df       	rcall	.-76     	; 0x4f2 <goto_no_detect>
     53e:	ec 2f       	mov	r30, r28
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	93 e0       	ldi	r25, 0x03	; 3
     544:	ee 0f       	add	r30, r30
     546:	ff 1f       	adc	r31, r31
     548:	9a 95       	dec	r25
     54a:	e1 f7       	brne	.-8      	; 0x544 <start_cal_sensor+0xc>
     54c:	ea 56       	subi	r30, 0x6A	; 106
     54e:	ff 4f       	sbci	r31, 0xFF	; 255
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	80 83       	st	Z, r24
     554:	8f e0       	ldi	r24, 0x0F	; 15
     556:	81 83       	std	Z+1, r24	; 0x01
     558:	cf 91       	pop	r28
     55a:	08 95       	ret

0000055c <process_sensor>:
     55c:	4f 92       	push	r4
     55e:	5f 92       	push	r5
     560:	6f 92       	push	r6
     562:	7f 92       	push	r7
     564:	8f 92       	push	r8
     566:	9f 92       	push	r9
     568:	af 92       	push	r10
     56a:	bf 92       	push	r11
     56c:	df 92       	push	r13
     56e:	ef 92       	push	r14
     570:	ff 92       	push	r15
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	0f 92       	push	r0
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
     580:	18 2f       	mov	r17, r24
     582:	e6 2e       	mov	r14, r22
     584:	62 df       	rcall	.-316    	; 0x44a <qt_get_sensor_delta>
     586:	4c 01       	movw	r8, r24
     588:	a1 2e       	mov	r10, r17
     58a:	bb 24       	eor	r11, r11
     58c:	63 e0       	ldi	r22, 0x03	; 3
     58e:	aa 0c       	add	r10, r10
     590:	bb 1c       	adc	r11, r11
     592:	6a 95       	dec	r22
     594:	e1 f7       	brne	.-8      	; 0x58e <process_sensor+0x32>
     596:	f5 01       	movw	r30, r10
     598:	ea 56       	subi	r30, 0x6A	; 106
     59a:	ff 4f       	sbci	r31, 0xFF	; 255
     59c:	44 81       	ldd	r20, Z+4	; 0x04
     59e:	23 81       	ldd	r18, Z+3	; 0x03
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	84 2f       	mov	r24, r20
     5a4:	83 70       	andi	r24, 0x03	; 3
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	01 96       	adiw	r24, 0x01	; 1
     5aa:	b9 01       	movw	r22, r18
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <process_sensor+0x56>
     5ae:	75 95       	asr	r23
     5b0:	67 95       	ror	r22
     5b2:	8a 95       	dec	r24
     5b4:	e2 f7       	brpl	.-8      	; 0x5ae <process_sensor+0x52>
     5b6:	cb 01       	movw	r24, r22
     5b8:	62 30       	cpi	r22, 0x02	; 2
     5ba:	08 f4       	brcc	.+2      	; 0x5be <process_sensor+0x62>
     5bc:	82 e0       	ldi	r24, 0x02	; 2
     5be:	b9 01       	movw	r22, r18
     5c0:	68 1b       	sub	r22, r24
     5c2:	71 09       	sbc	r23, r1
     5c4:	f5 01       	movw	r30, r10
     5c6:	ea 56       	subi	r30, 0x6A	; 106
     5c8:	ff 4f       	sbci	r31, 0xFF	; 255
     5ca:	80 81       	ld	r24, Z
     5cc:	84 30       	cpi	r24, 0x04	; 4
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <process_sensor+0x76>
     5d0:	d3 c0       	rjmp	.+422    	; 0x778 <process_sensor+0x21c>
     5d2:	85 30       	cpi	r24, 0x05	; 5
     5d4:	30 f4       	brcc	.+12     	; 0x5e2 <process_sensor+0x86>
     5d6:	81 30       	cpi	r24, 0x01	; 1
     5d8:	71 f0       	breq	.+28     	; 0x5f6 <process_sensor+0x9a>
     5da:	82 30       	cpi	r24, 0x02	; 2
     5dc:	09 f0       	breq	.+2      	; 0x5e0 <process_sensor+0x84>
     5de:	12 c2       	rjmp	.+1060   	; 0xa04 <process_sensor+0x4a8>
     5e0:	56 c0       	rjmp	.+172    	; 0x68e <process_sensor+0x132>
     5e2:	80 31       	cpi	r24, 0x10	; 16
     5e4:	09 f4       	brne	.+2      	; 0x5e8 <process_sensor+0x8c>
     5e6:	5c c1       	rjmp	.+696    	; 0x8a0 <process_sensor+0x344>
     5e8:	80 32       	cpi	r24, 0x20	; 32
     5ea:	09 f4       	brne	.+2      	; 0x5ee <process_sensor+0x92>
     5ec:	e3 c1       	rjmp	.+966    	; 0x9b4 <process_sensor+0x458>
     5ee:	88 30       	cpi	r24, 0x08	; 8
     5f0:	09 f0       	breq	.+2      	; 0x5f4 <process_sensor+0x98>
     5f2:	08 c2       	rjmp	.+1040   	; 0xa04 <process_sensor+0x4a8>
     5f4:	b3 c1       	rjmp	.+870    	; 0x95c <process_sensor+0x400>
     5f6:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <lib_status_flags>
     5fa:	30 91 74 00 	lds	r19, 0x0074	; 0x800074 <lib_status_flags+0x1>
     5fe:	32 60       	ori	r19, 0x02	; 2
     600:	65 81       	ldd	r22, Z+5	; 0x05
     602:	76 81       	ldd	r23, Z+6	; 0x06
     604:	7f 01       	movw	r14, r30
     606:	08 94       	sec
     608:	e1 1c       	adc	r14, r1
     60a:	f1 1c       	adc	r15, r1
     60c:	2b c0       	rjmp	.+86     	; 0x664 <process_sensor+0x108>
     60e:	f7 01       	movw	r30, r14
     610:	80 81       	ld	r24, Z
     612:	e6 2f       	mov	r30, r22
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	df 01       	movw	r26, r30
     618:	aa 0f       	add	r26, r26
     61a:	bb 1f       	adc	r27, r27
     61c:	a1 58       	subi	r26, 0x81	; 129
     61e:	bf 4f       	sbci	r27, 0xFF	; 255
     620:	8a 30       	cpi	r24, 0x0A	; 10
     622:	38 f0       	brcs	.+14     	; 0x632 <process_sensor+0xd6>
     624:	ee 0f       	add	r30, r30
     626:	ff 1f       	adc	r31, r31
     628:	e9 58       	subi	r30, 0x89	; 137
     62a:	ff 4f       	sbci	r31, 0xFF	; 255
     62c:	80 81       	ld	r24, Z
     62e:	91 81       	ldd	r25, Z+1	; 0x01
     630:	14 c0       	rjmp	.+40     	; 0x65a <process_sensor+0xfe>
     632:	4d 91       	ld	r20, X+
     634:	5c 91       	ld	r21, X
     636:	11 97       	sbiw	r26, 0x01	; 1
     638:	ee 0f       	add	r30, r30
     63a:	ff 1f       	adc	r31, r31
     63c:	e9 58       	subi	r30, 0x89	; 137
     63e:	ff 4f       	sbci	r31, 0xFF	; 255
     640:	80 81       	ld	r24, Z
     642:	91 81       	ldd	r25, Z+1	; 0x01
     644:	84 17       	cp	r24, r20
     646:	95 07       	cpc	r25, r21
     648:	18 f4       	brcc	.+6      	; 0x650 <process_sensor+0xf4>
     64a:	ca 01       	movw	r24, r20
     64c:	01 97       	sbiw	r24, 0x01	; 1
     64e:	05 c0       	rjmp	.+10     	; 0x65a <process_sensor+0xfe>
     650:	48 17       	cp	r20, r24
     652:	59 07       	cpc	r21, r25
     654:	30 f4       	brcc	.+12     	; 0x662 <process_sensor+0x106>
     656:	ca 01       	movw	r24, r20
     658:	01 96       	adiw	r24, 0x01	; 1
     65a:	11 96       	adiw	r26, 0x01	; 1
     65c:	9c 93       	st	X, r25
     65e:	8e 93       	st	-X, r24
     660:	28 60       	ori	r18, 0x08	; 8
     662:	6f 5f       	subi	r22, 0xFF	; 255
     664:	76 17       	cp	r23, r22
     666:	98 f6       	brcc	.-90     	; 0x60e <process_sensor+0xb2>
     668:	30 93 74 00 	sts	0x0074, r19	; 0x800074 <lib_status_flags+0x1>
     66c:	20 93 73 00 	sts	0x0073, r18	; 0x800073 <lib_status_flags>
     670:	f5 01       	movw	r30, r10
     672:	ea 56       	subi	r30, 0x6A	; 106
     674:	ff 4f       	sbci	r31, 0xFF	; 255
     676:	81 81       	ldd	r24, Z+1	; 0x01
     678:	81 50       	subi	r24, 0x01	; 1
     67a:	81 83       	std	Z+1, r24	; 0x01
     67c:	88 23       	and	r24, r24
     67e:	11 f4       	brne	.+4      	; 0x684 <process_sensor+0x128>
     680:	81 2f       	mov	r24, r17
     682:	37 df       	rcall	.-402    	; 0x4f2 <goto_no_detect>
     684:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <qt_config_data+0x2>
     688:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <dht_counter>
     68c:	b3 c1       	rjmp	.+870    	; 0x9f4 <process_sensor+0x498>
     68e:	42 ff       	sbrs	r20, 2
     690:	08 c0       	rjmp	.+16     	; 0x6a2 <process_sensor+0x146>
     692:	a5 81       	ldd	r26, Z+5	; 0x05
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	aa 54       	subi	r26, 0x4A	; 74
     698:	bf 4f       	sbci	r27, 0xFF	; 255
     69a:	1c 92       	st	X, r1
     69c:	80 e2       	ldi	r24, 0x20	; 32
     69e:	80 83       	st	Z, r24
     6a0:	a0 c1       	rjmp	.+832    	; 0x9e2 <process_sensor+0x486>
     6a2:	c4 01       	movw	r24, r8
     6a4:	97 fe       	sbrs	r9, 7
     6a6:	02 c0       	rjmp	.+4      	; 0x6ac <process_sensor+0x150>
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	82 17       	cp	r24, r18
     6ae:	93 07       	cpc	r25, r19
     6b0:	38 f0       	brcs	.+14     	; 0x6c0 <process_sensor+0x164>
     6b2:	f5 01       	movw	r30, r10
     6b4:	ea 56       	subi	r30, 0x6A	; 106
     6b6:	ff 4f       	sbci	r31, 0xFF	; 255
     6b8:	84 e0       	ldi	r24, 0x04	; 4
     6ba:	80 83       	st	Z, r24
     6bc:	12 82       	std	Z+2, r1	; 0x02
     6be:	9c c1       	rjmp	.+824    	; 0x9f8 <process_sensor+0x49c>
     6c0:	ee 20       	and	r14, r14
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <process_sensor+0x16a>
     6c4:	9f c1       	rjmp	.+830    	; 0xa04 <process_sensor+0x4a8>
     6c6:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <dht_counter>
     6ca:	88 23       	and	r24, r24
     6cc:	09 f0       	breq	.+2      	; 0x6d0 <process_sensor+0x174>
     6ce:	9a c1       	rjmp	.+820    	; 0xa04 <process_sensor+0x4a8>
     6d0:	f5 01       	movw	r30, r10
     6d2:	ea 56       	subi	r30, 0x6A	; 106
     6d4:	ff 4f       	sbci	r31, 0xFF	; 255
     6d6:	25 81       	ldd	r18, Z+5	; 0x05
     6d8:	d6 80       	ldd	r13, Z+6	; 0x06
     6da:	30 91 8e 00 	lds	r19, 0x008E	; 0x80008e <qt_config_data+0x5>
     6de:	30 58       	subi	r19, 0x80	; 128
     6e0:	00 e8       	ldi	r16, 0x80	; 128
     6e2:	a0 2e       	mov	r10, r16
     6e4:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <qt_config_data+0x4>
     6e8:	a8 1a       	sub	r10, r24
     6ea:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <lib_status_flags>
     6ee:	70 91 74 00 	lds	r23, 0x0074	; 0x800074 <lib_status_flags+0x1>
     6f2:	80 e8       	ldi	r24, 0x80	; 128
     6f4:	88 2e       	mov	r8, r24
     6f6:	39 c0       	rjmp	.+114    	; 0x76a <process_sensor+0x20e>
     6f8:	42 2f       	mov	r20, r18
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	da 01       	movw	r26, r20
     6fe:	aa 0f       	add	r26, r26
     700:	bb 1f       	adc	r27, r27
     702:	a1 58       	subi	r26, 0x81	; 129
     704:	bf 4f       	sbci	r27, 0xFF	; 255
     706:	8d 91       	ld	r24, X+
     708:	9c 91       	ld	r25, X
     70a:	11 97       	sbiw	r26, 0x01	; 1
     70c:	fa 01       	movw	r30, r20
     70e:	ee 0f       	add	r30, r30
     710:	ff 1f       	adc	r31, r31
     712:	e9 58       	subi	r30, 0x89	; 137
     714:	ff 4f       	sbci	r31, 0xFF	; 255
     716:	00 81       	ld	r16, Z
     718:	11 81       	ldd	r17, Z+1	; 0x01
     71a:	fa 01       	movw	r30, r20
     71c:	ea 54       	subi	r30, 0x4A	; 74
     71e:	ff 4f       	sbci	r31, 0xFF	; 255
     720:	80 17       	cp	r24, r16
     722:	91 07       	cpc	r25, r17
     724:	40 f4       	brcc	.+16     	; 0x736 <process_sensor+0x1da>
     726:	40 81       	ld	r20, Z
     728:	4e 0d       	add	r20, r14
     72a:	40 83       	st	Z, r20
     72c:	43 17       	cp	r20, r19
     72e:	e0 f0       	brcs	.+56     	; 0x768 <process_sensor+0x20c>
     730:	80 82       	st	Z, r8
     732:	01 96       	adiw	r24, 0x01	; 1
     734:	0a c0       	rjmp	.+20     	; 0x74a <process_sensor+0x1ee>
     736:	08 17       	cp	r16, r24
     738:	19 07       	cpc	r17, r25
     73a:	60 f4       	brcc	.+24     	; 0x754 <process_sensor+0x1f8>
     73c:	40 81       	ld	r20, Z
     73e:	4e 19       	sub	r20, r14
     740:	40 83       	st	Z, r20
     742:	a4 16       	cp	r10, r20
     744:	88 f0       	brcs	.+34     	; 0x768 <process_sensor+0x20c>
     746:	80 82       	st	Z, r8
     748:	01 97       	sbiw	r24, 0x01	; 1
     74a:	11 96       	adiw	r26, 0x01	; 1
     74c:	9c 93       	st	X, r25
     74e:	8e 93       	st	-X, r24
     750:	68 60       	ori	r22, 0x08	; 8
     752:	0a c0       	rjmp	.+20     	; 0x768 <process_sensor+0x20c>
     754:	80 81       	ld	r24, Z
     756:	81 38       	cpi	r24, 0x81	; 129
     758:	10 f0       	brcs	.+4      	; 0x75e <process_sensor+0x202>
     75a:	81 50       	subi	r24, 0x01	; 1
     75c:	80 83       	st	Z, r24
     75e:	80 81       	ld	r24, Z
     760:	87 fd       	sbrc	r24, 7
     762:	02 c0       	rjmp	.+4      	; 0x768 <process_sensor+0x20c>
     764:	8f 5f       	subi	r24, 0xFF	; 255
     766:	80 83       	st	Z, r24
     768:	2f 5f       	subi	r18, 0xFF	; 255
     76a:	d2 16       	cp	r13, r18
     76c:	28 f6       	brcc	.-118    	; 0x6f8 <process_sensor+0x19c>
     76e:	70 93 74 00 	sts	0x0074, r23	; 0x800074 <lib_status_flags+0x1>
     772:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <lib_status_flags>
     776:	46 c1       	rjmp	.+652    	; 0xa04 <process_sensor+0x4a8>
     778:	c4 01       	movw	r24, r8
     77a:	97 fe       	sbrs	r9, 7
     77c:	02 c0       	rjmp	.+4      	; 0x782 <process_sensor+0x226>
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	82 17       	cp	r24, r18
     784:	93 07       	cpc	r25, r19
     786:	08 f4       	brcc	.+2      	; 0x78a <process_sensor+0x22e>
     788:	23 c1       	rjmp	.+582    	; 0x9d0 <process_sensor+0x474>
     78a:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <qt_config_data+0x2>
     78e:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <dht_counter>
     792:	f5 01       	movw	r30, r10
     794:	ea 56       	subi	r30, 0x6A	; 106
     796:	ff 4f       	sbci	r31, 0xFF	; 255
     798:	82 81       	ldd	r24, Z+2	; 0x02
     79a:	8f 5f       	subi	r24, 0xFF	; 255
     79c:	82 83       	std	Z+2, r24	; 0x02
     79e:	84 81       	ldd	r24, Z+4	; 0x04
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	88 73       	andi	r24, 0x38	; 56
     7a4:	90 70       	andi	r25, 0x00	; 0
     7a6:	63 e0       	ldi	r22, 0x03	; 3
     7a8:	96 95       	lsr	r25
     7aa:	87 95       	ror	r24
     7ac:	6a 95       	dec	r22
     7ae:	e1 f7       	brne	.-8      	; 0x7a8 <process_sensor+0x24c>
     7b0:	d8 2e       	mov	r13, r24
     7b2:	88 23       	and	r24, r24
     7b4:	b1 f5       	brne	.+108    	; 0x822 <process_sensor+0x2c6>
     7b6:	48 c0       	rjmp	.+144    	; 0x848 <process_sensor+0x2ec>
     7b8:	01 17       	cp	r16, r17
     7ba:	89 f1       	breq	.+98     	; 0x81e <process_sensor+0x2c2>
     7bc:	40 2e       	mov	r4, r16
     7be:	55 24       	eor	r5, r5
     7c0:	43 e0       	ldi	r20, 0x03	; 3
     7c2:	44 0c       	add	r4, r4
     7c4:	55 1c       	adc	r5, r5
     7c6:	4a 95       	dec	r20
     7c8:	e1 f7       	brne	.-8      	; 0x7c2 <process_sensor+0x266>
     7ca:	66 e9       	ldi	r22, 0x96	; 150
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	46 0e       	add	r4, r22
     7d0:	57 1e       	adc	r5, r23
     7d2:	f2 01       	movw	r30, r4
     7d4:	84 81       	ldd	r24, Z+4	; 0x04
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	88 73       	andi	r24, 0x38	; 56
     7da:	90 70       	andi	r25, 0x00	; 0
     7dc:	53 e0       	ldi	r21, 0x03	; 3
     7de:	96 95       	lsr	r25
     7e0:	87 95       	ror	r24
     7e2:	5a 95       	dec	r21
     7e4:	e1 f7       	brne	.-8      	; 0x7de <process_sensor+0x282>
     7e6:	d8 16       	cp	r13, r24
     7e8:	d1 f4       	brne	.+52     	; 0x81e <process_sensor+0x2c2>
     7ea:	80 2f       	mov	r24, r16
     7ec:	29 83       	std	Y+1, r18	; 0x01
     7ee:	2d de       	rcall	.-934    	; 0x44a <qt_get_sensor_delta>
     7f0:	f2 01       	movw	r30, r4
     7f2:	33 81       	ldd	r19, Z+3	; 0x03
     7f4:	ac 01       	movw	r20, r24
     7f6:	43 1b       	sub	r20, r19
     7f8:	51 09       	sbc	r21, r1
     7fa:	f3 01       	movw	r30, r6
     7fc:	80 81       	ld	r24, Z
     7fe:	b4 01       	movw	r22, r8
     800:	68 1b       	sub	r22, r24
     802:	71 09       	sbc	r23, r1
     804:	29 81       	ldd	r18, Y+1	; 0x01
     806:	64 17       	cp	r22, r20
     808:	75 07       	cpc	r23, r21
     80a:	34 f0       	brlt	.+12     	; 0x818 <process_sensor+0x2bc>
     80c:	f2 01       	movw	r30, r4
     80e:	80 81       	ld	r24, Z
     810:	80 31       	cpi	r24, 0x10	; 16
     812:	11 f0       	breq	.+4      	; 0x818 <process_sensor+0x2bc>
     814:	88 30       	cpi	r24, 0x08	; 8
     816:	19 f4       	brne	.+6      	; 0x81e <process_sensor+0x2c2>
     818:	f7 01       	movw	r30, r14
     81a:	10 82       	st	Z, r1
     81c:	21 e0       	ldi	r18, 0x01	; 1
     81e:	0f 5f       	subi	r16, 0xFF	; 255
     820:	0c c0       	rjmp	.+24     	; 0x83a <process_sensor+0x2de>
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	00 e0       	ldi	r16, 0x00	; 0
     826:	33 e0       	ldi	r19, 0x03	; 3
     828:	63 2e       	mov	r6, r19
     82a:	71 2c       	mov	r7, r1
     82c:	6e 0e       	add	r6, r30
     82e:	7f 1e       	adc	r7, r31
     830:	7f 01       	movw	r14, r30
     832:	62 e0       	ldi	r22, 0x02	; 2
     834:	70 e0       	ldi	r23, 0x00	; 0
     836:	e6 0e       	add	r14, r22
     838:	f7 1e       	adc	r15, r23
     83a:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <num_sensors>
     83e:	08 17       	cp	r16, r24
     840:	08 f4       	brcc	.+2      	; 0x844 <process_sensor+0x2e8>
     842:	ba cf       	rjmp	.-140    	; 0x7b8 <process_sensor+0x25c>
     844:	22 23       	and	r18, r18
     846:	79 f4       	brne	.+30     	; 0x866 <process_sensor+0x30a>
     848:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <qt_config_data+0x1>
     84c:	88 23       	and	r24, r24
     84e:	59 f0       	breq	.+22     	; 0x866 <process_sensor+0x30a>
     850:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <lib_status_flags>
     854:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <lib_status_flags+0x1>
     858:	98 60       	ori	r25, 0x08	; 8
     85a:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <lib_status_flags+0x1>
     85e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <lib_status_flags>
     862:	01 e0       	ldi	r16, 0x01	; 1
     864:	01 c0       	rjmp	.+2      	; 0x868 <process_sensor+0x30c>
     866:	00 e0       	ldi	r16, 0x00	; 0
     868:	f5 01       	movw	r30, r10
     86a:	ea 56       	subi	r30, 0x6A	; 106
     86c:	ff 4f       	sbci	r31, 0xFF	; 255
     86e:	92 81       	ldd	r25, Z+2	; 0x02
     870:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <qt_config_data+0x1>
     874:	98 17       	cp	r25, r24
     876:	08 f4       	brcc	.+2      	; 0x87a <process_sensor+0x31e>
     878:	c6 c0       	rjmp	.+396    	; 0xa06 <process_sensor+0x4aa>
     87a:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <lib_status_flags>
     87e:	30 91 74 00 	lds	r19, 0x0074	; 0x800074 <lib_status_flags+0x1>
     882:	23 60       	ori	r18, 0x03	; 3
     884:	30 93 74 00 	sts	0x0074, r19	; 0x800074 <lib_status_flags+0x1>
     888:	20 93 73 00 	sts	0x0073, r18	; 0x800073 <lib_status_flags>
     88c:	80 e1       	ldi	r24, 0x10	; 16
     88e:	80 83       	st	Z, r24
     890:	11 82       	std	Z+1, r1	; 0x01
     892:	84 81       	ldd	r24, Z+4	; 0x04
     894:	80 7c       	andi	r24, 0xC0	; 192
     896:	09 f4       	brne	.+2      	; 0x89a <process_sensor+0x33e>
     898:	b6 c0       	rjmp	.+364    	; 0xa06 <process_sensor+0x4aa>
     89a:	81 2f       	mov	r24, r17
     89c:	83 d3       	rcall	.+1798   	; 0xfa4 <rotor_slider_enter_detect>
     89e:	b3 c0       	rjmp	.+358    	; 0xa06 <process_sensor+0x4aa>
     8a0:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <lib_status_flags>
     8a4:	30 91 74 00 	lds	r19, 0x0074	; 0x800074 <lib_status_flags+0x1>
     8a8:	42 ff       	sbrs	r20, 2
     8aa:	0e c0       	rjmp	.+28     	; 0x8c8 <process_sensor+0x36c>
     8ac:	a5 81       	ldd	r26, Z+5	; 0x05
     8ae:	b0 e0       	ldi	r27, 0x00	; 0
     8b0:	aa 54       	subi	r26, 0x4A	; 74
     8b2:	bf 4f       	sbci	r27, 0xFF	; 255
     8b4:	80 e8       	ldi	r24, 0x80	; 128
     8b6:	8c 93       	st	X, r24
     8b8:	80 e2       	ldi	r24, 0x20	; 32
     8ba:	80 83       	st	Z, r24
     8bc:	30 61       	ori	r19, 0x10	; 16
     8be:	30 93 74 00 	sts	0x0074, r19	; 0x800074 <lib_status_flags+0x1>
     8c2:	20 93 73 00 	sts	0x0073, r18	; 0x800073 <lib_status_flags>
     8c6:	42 c0       	rjmp	.+132    	; 0x94c <process_sensor+0x3f0>
     8c8:	c4 01       	movw	r24, r8
     8ca:	97 fe       	sbrs	r9, 7
     8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <process_sensor+0x376>
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	86 17       	cp	r24, r22
     8d4:	97 07       	cpc	r25, r23
     8d6:	58 f4       	brcc	.+22     	; 0x8ee <process_sensor+0x392>
     8d8:	f5 01       	movw	r30, r10
     8da:	ea 56       	subi	r30, 0x6A	; 106
     8dc:	ff 4f       	sbci	r31, 0xFF	; 255
     8de:	88 e0       	ldi	r24, 0x08	; 8
     8e0:	80 83       	st	Z, r24
     8e2:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <lib_status_flags>
     8e6:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <lib_status_flags+0x1>
     8ea:	94 60       	ori	r25, 0x04	; 4
     8ec:	2b c0       	rjmp	.+86     	; 0x944 <process_sensor+0x3e8>
     8ee:	21 60       	ori	r18, 0x01	; 1
     8f0:	30 93 74 00 	sts	0x0074, r19	; 0x800074 <lib_status_flags+0x1>
     8f4:	20 93 73 00 	sts	0x0073, r18	; 0x800073 <lib_status_flags>
     8f8:	f5 01       	movw	r30, r10
     8fa:	ea 56       	subi	r30, 0x6A	; 106
     8fc:	ff 4f       	sbci	r31, 0xFF	; 255
     8fe:	82 81       	ldd	r24, Z+2	; 0x02
     900:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <qt_config_data+0x1>
     904:	89 17       	cp	r24, r25
     906:	10 f4       	brcc	.+4      	; 0x90c <process_sensor+0x3b0>
     908:	8f 5f       	subi	r24, 0xFF	; 255
     90a:	82 83       	std	Z+2, r24	; 0x02
     90c:	f5 01       	movw	r30, r10
     90e:	ea 56       	subi	r30, 0x6A	; 106
     910:	ff 4f       	sbci	r31, 0xFF	; 255
     912:	84 81       	ldd	r24, Z+4	; 0x04
     914:	80 7c       	andi	r24, 0xC0	; 192
     916:	11 f0       	breq	.+4      	; 0x91c <process_sensor+0x3c0>
     918:	81 2f       	mov	r24, r17
     91a:	19 d2       	rcall	.+1074   	; 0xd4e <calc_rotor_slider_value>
     91c:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <qt_config_data+0x3>
     920:	99 23       	and	r25, r25
     922:	b1 f0       	breq	.+44     	; 0x950 <process_sensor+0x3f4>
     924:	f5 01       	movw	r30, r10
     926:	ea 56       	subi	r30, 0x6A	; 106
     928:	ff 4f       	sbci	r31, 0xFF	; 255
     92a:	81 81       	ldd	r24, Z+1	; 0x01
     92c:	89 17       	cp	r24, r25
     92e:	18 f4       	brcc	.+6      	; 0x936 <process_sensor+0x3da>
     930:	e8 0e       	add	r14, r24
     932:	e1 82       	std	Z+1, r14	; 0x01
     934:	0d c0       	rjmp	.+26     	; 0x950 <process_sensor+0x3f4>
     936:	81 2f       	mov	r24, r17
     938:	ff dd       	rcall	.-1026   	; 0x538 <start_cal_sensor>
     93a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <lib_status_flags>
     93e:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <lib_status_flags+0x1>
     942:	92 60       	ori	r25, 0x02	; 2
     944:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <lib_status_flags+0x1>
     948:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <lib_status_flags>
     94c:	01 e0       	ldi	r16, 0x01	; 1
     94e:	01 c0       	rjmp	.+2      	; 0x952 <process_sensor+0x3f6>
     950:	00 e0       	ldi	r16, 0x00	; 0
     952:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <qt_config_data+0x2>
     956:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <dht_counter>
     95a:	55 c0       	rjmp	.+170    	; 0xa06 <process_sensor+0x4aa>
     95c:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <qt_config_data+0x2>
     960:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <dht_counter>
     964:	82 81       	ldd	r24, Z+2	; 0x02
     966:	88 23       	and	r24, r24
     968:	99 f1       	breq	.+102    	; 0x9d0 <process_sensor+0x474>
     96a:	c4 01       	movw	r24, r8
     96c:	97 fe       	sbrs	r9, 7
     96e:	02 c0       	rjmp	.+4      	; 0x974 <process_sensor+0x418>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <lib_status_flags>
     978:	30 91 74 00 	lds	r19, 0x0074	; 0x800074 <lib_status_flags+0x1>
     97c:	68 17       	cp	r22, r24
     97e:	79 07       	cpc	r23, r25
     980:	60 f4       	brcc	.+24     	; 0x99a <process_sensor+0x43e>
     982:	f5 01       	movw	r30, r10
     984:	ea 56       	subi	r30, 0x6A	; 106
     986:	ff 4f       	sbci	r31, 0xFF	; 255
     988:	80 e1       	ldi	r24, 0x10	; 16
     98a:	80 83       	st	Z, r24
     98c:	21 60       	ori	r18, 0x01	; 1
     98e:	30 93 74 00 	sts	0x0074, r19	; 0x800074 <lib_status_flags+0x1>
     992:	20 93 73 00 	sts	0x0073, r18	; 0x800073 <lib_status_flags>
     996:	00 e0       	ldi	r16, 0x00	; 0
     998:	06 c0       	rjmp	.+12     	; 0x9a6 <process_sensor+0x44a>
     99a:	34 60       	ori	r19, 0x04	; 4
     99c:	30 93 74 00 	sts	0x0074, r19	; 0x800074 <lib_status_flags+0x1>
     9a0:	20 93 73 00 	sts	0x0073, r18	; 0x800073 <lib_status_flags>
     9a4:	01 e0       	ldi	r16, 0x01	; 1
     9a6:	f5 01       	movw	r30, r10
     9a8:	ea 56       	subi	r30, 0x6A	; 106
     9aa:	ff 4f       	sbci	r31, 0xFF	; 255
     9ac:	82 81       	ldd	r24, Z+2	; 0x02
     9ae:	81 50       	subi	r24, 0x01	; 1
     9b0:	82 83       	std	Z+2, r24	; 0x02
     9b2:	29 c0       	rjmp	.+82     	; 0xa06 <process_sensor+0x4aa>
     9b4:	a5 81       	ldd	r26, Z+5	; 0x05
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	aa 54       	subi	r26, 0x4A	; 74
     9ba:	bf 4f       	sbci	r27, 0xFF	; 255
     9bc:	8c 91       	ld	r24, X
     9be:	8f 5f       	subi	r24, 0xFF	; 255
     9c0:	8c 93       	st	X, r24
     9c2:	42 fd       	sbrc	r20, 2
     9c4:	08 c0       	rjmp	.+16     	; 0x9d6 <process_sensor+0x47a>
     9c6:	87 ff       	sbrs	r24, 7
     9c8:	03 c0       	rjmp	.+6      	; 0x9d0 <process_sensor+0x474>
     9ca:	80 e1       	ldi	r24, 0x10	; 16
     9cc:	80 83       	st	Z, r24
     9ce:	1a c0       	rjmp	.+52     	; 0xa04 <process_sensor+0x4a8>
     9d0:	81 2f       	mov	r24, r17
     9d2:	8f dd       	rcall	.-1250   	; 0x4f2 <goto_no_detect>
     9d4:	17 c0       	rjmp	.+46     	; 0xa04 <process_sensor+0x4a8>
     9d6:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <qt_config_data+0x6>
     9da:	89 17       	cp	r24, r25
     9dc:	68 f0       	brcs	.+26     	; 0x9f8 <process_sensor+0x49c>
     9de:	81 2f       	mov	r24, r17
     9e0:	ab dd       	rcall	.-1194   	; 0x538 <start_cal_sensor>
     9e2:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <lib_status_flags>
     9e6:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <lib_status_flags+0x1>
     9ea:	90 61       	ori	r25, 0x10	; 16
     9ec:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <lib_status_flags+0x1>
     9f0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <lib_status_flags>
     9f4:	01 e0       	ldi	r16, 0x01	; 1
     9f6:	07 c0       	rjmp	.+14     	; 0xa06 <process_sensor+0x4aa>
     9f8:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <lib_status_flags>
     9fc:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <lib_status_flags+0x1>
     a00:	94 60       	ori	r25, 0x04	; 4
     a02:	f4 cf       	rjmp	.-24     	; 0x9ec <process_sensor+0x490>
     a04:	00 e0       	ldi	r16, 0x00	; 0
     a06:	80 2f       	mov	r24, r16
     a08:	0f 90       	pop	r0
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	ff 90       	pop	r15
     a14:	ef 90       	pop	r14
     a16:	df 90       	pop	r13
     a18:	bf 90       	pop	r11
     a1a:	af 90       	pop	r10
     a1c:	9f 90       	pop	r9
     a1e:	8f 90       	pop	r8
     a20:	7f 90       	pop	r7
     a22:	6f 90       	pop	r6
     a24:	5f 90       	pop	r5
     a26:	4f 90       	pop	r4
     a28:	08 95       	ret

00000a2a <get_channel_delta>:
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	fc 01       	movw	r30, r24
     a2e:	34 96       	adiw	r30, 0x04	; 4
     a30:	27 e7       	ldi	r18, 0x77	; 119
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	ee 0f       	add	r30, r30
     a36:	ff 1f       	adc	r31, r31
     a38:	e2 0f       	add	r30, r18
     a3a:	f3 1f       	adc	r31, r19
     a3c:	dc 01       	movw	r26, r24
     a3e:	aa 0f       	add	r26, r26
     a40:	bb 1f       	adc	r27, r27
     a42:	a2 0f       	add	r26, r18
     a44:	b3 1f       	adc	r27, r19
     a46:	80 81       	ld	r24, Z
     a48:	91 81       	ldd	r25, Z+1	; 0x01
     a4a:	2d 91       	ld	r18, X+
     a4c:	3c 91       	ld	r19, X
     a4e:	11 97       	sbiw	r26, 0x01	; 1
     a50:	82 1b       	sub	r24, r18
     a52:	93 0b       	sbc	r25, r19
     a54:	08 95       	ret

00000a56 <burst_init>:
     a56:	00 97       	sbiw	r24, 0x00	; 0
     a58:	11 f0       	breq	.+4      	; 0xa5e <burst_init+0x8>
     a5a:	fc 01       	movw	r30, r24
     a5c:	09 95       	icall
     a5e:	08 95       	ret

00000a60 <burst_reset>:
     a60:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <SNS_array>
     a64:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <SNS_array+0x1>
     a68:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <SNSK_array>
     a6c:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <SNSK_array+0x1>
     a70:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <SNS_array+0x2>
     a74:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <SNS_array+0x3>
     a78:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <SNSK_array+0x2>
     a7c:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <SNSK_array+0x3>
     a80:	08 95       	ret

00000a82 <burst>:
     a82:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <SNS_array+0x2>
     a86:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <SNS_array>
     a8a:	89 2b       	or	r24, r25
     a8c:	41 f0       	breq	.+16     	; 0xa9e <burst+0x1c>
     a8e:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <burst_proc>
     a92:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <burst_proc+0x1>
     a96:	30 97       	sbiw	r30, 0x00	; 0
     a98:	11 f0       	breq	.+4      	; 0xa9e <burst+0x1c>
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	09 95       	icall
     a9e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <SNS_array+0x3>
     aa2:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <SNS_array+0x1>
     aa6:	89 2b       	or	r24, r25
     aa8:	41 f0       	breq	.+16     	; 0xaba <burst+0x38>
     aaa:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <burst_proc>
     aae:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <burst_proc+0x1>
     ab2:	30 97       	sbiw	r30, 0x00	; 0
     ab4:	11 f0       	breq	.+4      	; 0xaba <burst+0x38>
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	09 95       	icall
     aba:	08 95       	ret

00000abc <init_rotor_slider>:
     abc:	ef 92       	push	r14
     abe:	0f 93       	push	r16
     ac0:	9e 2d       	mov	r25, r14
     ac2:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <num_sensors>
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	33 e0       	ldi	r19, 0x03	; 3
     aca:	ee 0f       	add	r30, r30
     acc:	ff 1f       	adc	r31, r31
     ace:	3a 95       	dec	r19
     ad0:	e1 f7       	brne	.-8      	; 0xaca <init_rotor_slider+0xe>
     ad2:	ea 56       	subi	r30, 0x6A	; 106
     ad4:	ff 4f       	sbci	r31, 0xFF	; 255
     ad6:	43 83       	std	Z+3, r20	; 0x03
     ad8:	30 91 c2 00 	lds	r19, 0x00C2	; 0x8000c2 <num_rotors_sliders>
     adc:	37 83       	std	Z+7, r19	; 0x07
     ade:	27 70       	andi	r18, 0x07	; 7
     ae0:	85 83       	std	Z+5, r24	; 0x05
     ae2:	66 83       	std	Z+6, r22	; 0x06
     ae4:	93 70       	andi	r25, 0x03	; 3
     ae6:	22 0f       	add	r18, r18
     ae8:	22 0f       	add	r18, r18
     aea:	22 0f       	add	r18, r18
     aec:	92 2b       	or	r25, r18
     aee:	94 83       	std	Z+4, r25	; 0x04
     af0:	83 2f       	mov	r24, r19
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	63 e0       	ldi	r22, 0x03	; 3
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	a6 d5       	rcall	.+2892   	; 0x1646 <__mulhi3>
     afa:	fc 01       	movw	r30, r24
     afc:	ed 53       	subi	r30, 0x3D	; 61
     afe:	ff 4f       	sbci	r31, 0xFF	; 255
     b00:	02 95       	swap	r16
     b02:	00 0f       	add	r16, r16
     b04:	00 7e       	andi	r16, 0xE0	; 224
     b06:	02 83       	std	Z+2, r16	; 0x02
     b08:	3f 5f       	subi	r19, 0xFF	; 255
     b0a:	30 93 c2 00 	sts	0x00C2, r19	; 0x8000c2 <num_rotors_sliders>
     b0e:	0f 91       	pop	r16
     b10:	ef 90       	pop	r14
     b12:	08 95       	ret

00000b14 <divide>:
     b14:	9c 01       	movw	r18, r24
     b16:	61 15       	cp	r22, r1
     b18:	71 05       	cpc	r23, r1
     b1a:	21 f1       	breq	.+72     	; 0xb64 <divide+0x50>
     b1c:	4f 5f       	subi	r20, 0xFF	; 255
     b1e:	03 c0       	rjmp	.+6      	; 0xb26 <divide+0x12>
     b20:	41 50       	subi	r20, 0x01	; 1
     b22:	22 0f       	add	r18, r18
     b24:	33 1f       	adc	r19, r19
     b26:	37 fd       	sbrc	r19, 7
     b28:	06 c0       	rjmp	.+12     	; 0xb36 <divide+0x22>
     b2a:	44 23       	and	r20, r20
     b2c:	c9 f7       	brne	.-14     	; 0xb20 <divide+0xc>
     b2e:	03 c0       	rjmp	.+6      	; 0xb36 <divide+0x22>
     b30:	4f 5f       	subi	r20, 0xFF	; 255
     b32:	66 0f       	add	r22, r22
     b34:	77 1f       	adc	r23, r23
     b36:	77 ff       	sbrs	r23, 7
     b38:	fb cf       	rjmp	.-10     	; 0xb30 <divide+0x1c>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	0b c0       	rjmp	.+22     	; 0xb56 <divide+0x42>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	41 50       	subi	r20, 0x01	; 1
     b46:	26 17       	cp	r18, r22
     b48:	37 07       	cpc	r19, r23
     b4a:	18 f0       	brcs	.+6      	; 0xb52 <divide+0x3e>
     b4c:	26 1b       	sub	r18, r22
     b4e:	37 0b       	sbc	r19, r23
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	76 95       	lsr	r23
     b54:	67 95       	ror	r22
     b56:	44 23       	and	r20, r20
     b58:	39 f0       	breq	.+14     	; 0xb68 <divide+0x54>
     b5a:	97 ff       	sbrs	r25, 7
     b5c:	f1 cf       	rjmp	.-30     	; 0xb40 <divide+0x2c>
     b5e:	8f ef       	ldi	r24, 0xFF	; 255
     b60:	9f ef       	ldi	r25, 0xFF	; 255
     b62:	08 95       	ret
     b64:	8f ef       	ldi	r24, 0xFF	; 255
     b66:	9f ef       	ldi	r25, 0xFF	; 255
     b68:	08 95       	ret

00000b6a <fill_out_rotor_slider_deltas>:
     b6a:	6f 92       	push	r6
     b6c:	7f 92       	push	r7
     b6e:	8f 92       	push	r8
     b70:	9f 92       	push	r9
     b72:	af 92       	push	r10
     b74:	bf 92       	push	r11
     b76:	cf 92       	push	r12
     b78:	df 92       	push	r13
     b7a:	ff 92       	push	r15
     b7c:	0f 93       	push	r16
     b7e:	1f 93       	push	r17
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	f8 2e       	mov	r15, r24
     b86:	c8 2f       	mov	r28, r24
     b88:	d0 e0       	ldi	r29, 0x00	; 0
     b8a:	4e 01       	movw	r8, r28
     b8c:	08 94       	sec
     b8e:	81 1c       	adc	r8, r1
     b90:	91 1c       	adc	r9, r1
     b92:	8e 01       	movw	r16, r28
     b94:	0c 5f       	subi	r16, 0xFC	; 252
     b96:	1f 4f       	sbci	r17, 0xFF	; 255
     b98:	b7 e7       	ldi	r27, 0x77	; 119
     b9a:	cb 2e       	mov	r12, r27
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	db 2e       	mov	r13, r27
     ba0:	00 0f       	add	r16, r16
     ba2:	11 1f       	adc	r17, r17
     ba4:	0c 0d       	add	r16, r12
     ba6:	1d 1d       	adc	r17, r13
     ba8:	f8 01       	movw	r30, r16
     baa:	a0 80       	ld	r10, Z
     bac:	b1 80       	ldd	r11, Z+1	; 0x01
     bae:	fe 01       	movw	r30, r28
     bb0:	35 96       	adiw	r30, 0x05	; 5
     bb2:	ee 0f       	add	r30, r30
     bb4:	ff 1f       	adc	r31, r31
     bb6:	ec 0d       	add	r30, r12
     bb8:	fd 1d       	adc	r31, r13
     bba:	80 81       	ld	r24, Z
     bbc:	91 81       	ldd	r25, Z+1	; 0x01
     bbe:	b5 01       	movw	r22, r10
     bc0:	4c e0       	ldi	r20, 0x0C	; 12
     bc2:	a8 df       	rcall	.-176    	; 0xb14 <divide>
     bc4:	bc 01       	movw	r22, r24
     bc6:	f4 01       	movw	r30, r8
     bc8:	ee 0f       	add	r30, r30
     bca:	ff 1f       	adc	r31, r31
     bcc:	ec 0d       	add	r30, r12
     bce:	fd 1d       	adc	r31, r13
     bd0:	80 81       	ld	r24, Z
     bd2:	91 81       	ldd	r25, Z+1	; 0x01
     bd4:	4c e0       	ldi	r20, 0x0C	; 12
     bd6:	9e df       	rcall	.-196    	; 0xb14 <divide>
     bd8:	3c 01       	movw	r6, r24
     bda:	32 e0       	ldi	r19, 0x02	; 2
     bdc:	83 2e       	mov	r8, r19
     bde:	91 2c       	mov	r9, r1
     be0:	8c 0e       	add	r8, r28
     be2:	9d 1e       	adc	r9, r29
     be4:	fe 01       	movw	r30, r28
     be6:	36 96       	adiw	r30, 0x06	; 6
     be8:	ee 0f       	add	r30, r30
     bea:	ff 1f       	adc	r31, r31
     bec:	ec 0d       	add	r30, r12
     bee:	fd 1d       	adc	r31, r13
     bf0:	80 81       	ld	r24, Z
     bf2:	91 81       	ldd	r25, Z+1	; 0x01
     bf4:	b5 01       	movw	r22, r10
     bf6:	4c e0       	ldi	r20, 0x0C	; 12
     bf8:	8d df       	rcall	.-230    	; 0xb14 <divide>
     bfa:	bc 01       	movw	r22, r24
     bfc:	f4 01       	movw	r30, r8
     bfe:	ee 0f       	add	r30, r30
     c00:	ff 1f       	adc	r31, r31
     c02:	ec 0d       	add	r30, r12
     c04:	fd 1d       	adc	r31, r13
     c06:	80 81       	ld	r24, Z
     c08:	91 81       	ldd	r25, Z+1	; 0x01
     c0a:	4c e0       	ldi	r20, 0x0C	; 12
     c0c:	83 df       	rcall	.-250    	; 0xb14 <divide>
     c0e:	ec 01       	movw	r28, r24
     c10:	8f 2d       	mov	r24, r15
     c12:	0b df       	rcall	.-490    	; 0xa2a <get_channel_delta>
     c14:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <rotor_slider_deltas+0x1>
     c18:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <rotor_slider_deltas>
     c1c:	f8 01       	movw	r30, r16
     c1e:	80 81       	ld	r24, Z
     c20:	91 81       	ldd	r25, Z+1	; 0x01
     c22:	9c 01       	movw	r18, r24
     c24:	26 19       	sub	r18, r6
     c26:	37 09       	sbc	r19, r7
     c28:	30 93 c9 00 	sts	0x00C9, r19	; 0x8000c9 <rotor_slider_deltas+0x3>
     c2c:	20 93 c8 00 	sts	0x00C8, r18	; 0x8000c8 <rotor_slider_deltas+0x2>
     c30:	8c 1b       	sub	r24, r28
     c32:	9d 0b       	sbc	r25, r29
     c34:	90 93 cb 00 	sts	0x00CB, r25	; 0x8000cb <rotor_slider_deltas+0x5>
     c38:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <rotor_slider_deltas+0x4>
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	ff 90       	pop	r15
     c46:	df 90       	pop	r13
     c48:	cf 90       	pop	r12
     c4a:	bf 90       	pop	r11
     c4c:	af 90       	pop	r10
     c4e:	9f 90       	pop	r9
     c50:	8f 90       	pop	r8
     c52:	7f 90       	pop	r7
     c54:	6f 90       	pop	r6
     c56:	08 95       	ret

00000c58 <qt_enable_rotor>:
     c58:	ef 92       	push	r14
     c5a:	0f 93       	push	r16
     c5c:	34 2f       	mov	r19, r20
     c5e:	90 2f       	mov	r25, r16
     c60:	0e 2d       	mov	r16, r14
     c62:	42 2f       	mov	r20, r18
     c64:	23 2f       	mov	r18, r19
     c66:	e9 2e       	mov	r14, r25
     c68:	29 df       	rcall	.-430    	; 0xabc <init_rotor_slider>
     c6a:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <num_sensors>
     c6e:	e9 2f       	mov	r30, r25
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	63 e0       	ldi	r22, 0x03	; 3
     c74:	ee 0f       	add	r30, r30
     c76:	ff 1f       	adc	r31, r31
     c78:	6a 95       	dec	r22
     c7a:	e1 f7       	brne	.-8      	; 0xc74 <qt_enable_rotor+0x1c>
     c7c:	ea 56       	subi	r30, 0x6A	; 106
     c7e:	ff 4f       	sbci	r31, 0xFF	; 255
     c80:	84 81       	ldd	r24, Z+4	; 0x04
     c82:	80 64       	ori	r24, 0x40	; 64
     c84:	84 83       	std	Z+4, r24	; 0x04
     c86:	9f 5f       	subi	r25, 0xFF	; 255
     c88:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <num_sensors>
     c8c:	0f 91       	pop	r16
     c8e:	ef 90       	pop	r14
     c90:	08 95       	ret

00000c92 <qt_enable_slider>:
     c92:	ef 92       	push	r14
     c94:	0f 93       	push	r16
     c96:	34 2f       	mov	r19, r20
     c98:	90 2f       	mov	r25, r16
     c9a:	0e 2d       	mov	r16, r14
     c9c:	42 2f       	mov	r20, r18
     c9e:	23 2f       	mov	r18, r19
     ca0:	e9 2e       	mov	r14, r25
     ca2:	0c df       	rcall	.-488    	; 0xabc <init_rotor_slider>
     ca4:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <num_sensors>
     ca8:	e9 2f       	mov	r30, r25
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	73 e0       	ldi	r23, 0x03	; 3
     cae:	ee 0f       	add	r30, r30
     cb0:	ff 1f       	adc	r31, r31
     cb2:	7a 95       	dec	r23
     cb4:	e1 f7       	brne	.-8      	; 0xcae <qt_enable_slider+0x1c>
     cb6:	ea 56       	subi	r30, 0x6A	; 106
     cb8:	ff 4f       	sbci	r31, 0xFF	; 255
     cba:	84 81       	ldd	r24, Z+4	; 0x04
     cbc:	80 68       	ori	r24, 0x80	; 128
     cbe:	84 83       	std	Z+4, r24	; 0x04
     cc0:	9f 5f       	subi	r25, 0xFF	; 255
     cc2:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <num_sensors>
     cc6:	0f 91       	pop	r16
     cc8:	ef 90       	pop	r14
     cca:	08 95       	ret

00000ccc <calc_rotor_slider_sensor_delta>:
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	18 2f       	mov	r17, r24
     cd4:	86 2f       	mov	r24, r22
     cd6:	c4 2f       	mov	r28, r20
     cd8:	48 df       	rcall	.-368    	; 0xb6a <fill_out_rotor_slider_deltas>
     cda:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <rotor_slider_deltas>
     cde:	90 91 c7 00 	lds	r25, 0x00C7	; 0x8000c7 <rotor_slider_deltas+0x1>
     ce2:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <rotor_slider_deltas+0x2>
     ce6:	30 91 c9 00 	lds	r19, 0x00C9	; 0x8000c9 <rotor_slider_deltas+0x3>
     cea:	f2 2f       	mov	r31, r18
     cec:	e3 2f       	mov	r30, r19
     cee:	82 17       	cp	r24, r18
     cf0:	93 07       	cpc	r25, r19
     cf2:	14 f4       	brge	.+4      	; 0xcf8 <calc_rotor_slider_sensor_delta+0x2c>
     cf4:	f8 2f       	mov	r31, r24
     cf6:	e9 2f       	mov	r30, r25
     cf8:	60 91 ca 00 	lds	r22, 0x00CA	; 0x8000ca <rotor_slider_deltas+0x4>
     cfc:	70 91 cb 00 	lds	r23, 0x00CB	; 0x8000cb <rotor_slider_deltas+0x5>
     d00:	4f 2f       	mov	r20, r31
     d02:	5e 2f       	mov	r21, r30
     d04:	64 17       	cp	r22, r20
     d06:	75 07       	cpc	r23, r21
     d08:	0c f4       	brge	.+2      	; 0xd0c <calc_rotor_slider_sensor_delta+0x40>
     d0a:	ab 01       	movw	r20, r22
     d0c:	82 0f       	add	r24, r18
     d0e:	93 1f       	adc	r25, r19
     d10:	86 0f       	add	r24, r22
     d12:	97 1f       	adc	r25, r23
     d14:	d0 e0       	ldi	r29, 0x00	; 0
     d16:	d0 95       	com	r29
     d18:	c1 95       	neg	r28
     d1a:	df 4f       	sbci	r29, 0xFF	; 255
     d1c:	c8 17       	cp	r28, r24
     d1e:	d9 07       	cpc	r29, r25
     d20:	64 f0       	brlt	.+24     	; 0xd3a <calc_rotor_slider_sensor_delta+0x6e>
     d22:	e1 2f       	mov	r30, r17
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	a3 e0       	ldi	r26, 0x03	; 3
     d28:	ee 0f       	add	r30, r30
     d2a:	ff 1f       	adc	r31, r31
     d2c:	aa 95       	dec	r26
     d2e:	e1 f7       	brne	.-8      	; 0xd28 <calc_rotor_slider_sensor_delta+0x5c>
     d30:	ea 56       	subi	r30, 0x6A	; 106
     d32:	ff 4f       	sbci	r31, 0xFF	; 255
     d34:	24 81       	ldd	r18, Z+4	; 0x04
     d36:	24 60       	ori	r18, 0x04	; 4
     d38:	24 83       	std	Z+4, r18	; 0x04
     d3a:	84 1b       	sub	r24, r20
     d3c:	95 0b       	sbc	r25, r21
     d3e:	84 1b       	sub	r24, r20
     d40:	95 0b       	sbc	r25, r21
     d42:	84 1b       	sub	r24, r20
     d44:	95 0b       	sbc	r25, r21
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	1f 91       	pop	r17
     d4c:	08 95       	ret

00000d4e <calc_rotor_slider_value>:
     d4e:	a0 e0       	ldi	r26, 0x00	; 0
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	ec ea       	ldi	r30, 0xAC	; 172
     d54:	f6 e0       	ldi	r31, 0x06	; 6
     d56:	a2 c4       	rjmp	.+2372   	; 0x169c <__prologue_saves__+0xe>
     d58:	08 2f       	mov	r16, r24
     d5a:	10 e0       	ldi	r17, 0x00	; 0
     d5c:	73 e0       	ldi	r23, 0x03	; 3
     d5e:	00 0f       	add	r16, r16
     d60:	11 1f       	adc	r17, r17
     d62:	7a 95       	dec	r23
     d64:	e1 f7       	brne	.-8      	; 0xd5e <calc_rotor_slider_value+0x10>
     d66:	f8 01       	movw	r30, r16
     d68:	ea 56       	subi	r30, 0x6A	; 106
     d6a:	ff 4f       	sbci	r31, 0xFF	; 255
     d6c:	c7 80       	ldd	r12, Z+7	; 0x07
     d6e:	dd 24       	eor	r13, r13
     d70:	c6 01       	movw	r24, r12
     d72:	63 e0       	ldi	r22, 0x03	; 3
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	67 d4       	rcall	.+2254   	; 0x1646 <__mulhi3>
     d78:	dc 01       	movw	r26, r24
     d7a:	ad 53       	subi	r26, 0x3D	; 61
     d7c:	bf 4f       	sbci	r27, 0xFF	; 255
     d7e:	12 96       	adiw	r26, 0x02	; 2
     d80:	ec 90       	ld	r14, X
     d82:	85 81       	ldd	r24, Z+5	; 0x05
     d84:	f2 de       	rcall	.-540    	; 0xb6a <fill_out_rotor_slider_deltas>
     d86:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <rotor_slider_deltas>
     d8a:	70 91 c7 00 	lds	r23, 0x00C7	; 0x8000c7 <rotor_slider_deltas+0x1>
     d8e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <rotor_slider_deltas+0x2>
     d92:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <rotor_slider_deltas+0x3>
     d96:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <rotor_slider_deltas+0x4>
     d9a:	f0 91 cb 00 	lds	r31, 0x00CB	; 0x8000cb <rotor_slider_deltas+0x5>
     d9e:	68 17       	cp	r22, r24
     da0:	79 07       	cpc	r23, r25
     da2:	4c f0       	brlt	.+18     	; 0xdb6 <calc_rotor_slider_value+0x68>
     da4:	8e 17       	cp	r24, r30
     da6:	9f 07       	cpc	r25, r31
     da8:	84 f4       	brge	.+32     	; 0xdca <calc_rotor_slider_value+0x7c>
     daa:	ab 01       	movw	r20, r22
     dac:	9c 01       	movw	r18, r24
     dae:	bf 01       	movw	r22, r30
     db0:	c0 e0       	ldi	r28, 0x00	; 0
     db2:	d0 e0       	ldi	r29, 0x00	; 0
     db4:	10 c0       	rjmp	.+32     	; 0xdd6 <calc_rotor_slider_value+0x88>
     db6:	9f 01       	movw	r18, r30
     db8:	e6 17       	cp	r30, r22
     dba:	f7 07       	cpc	r31, r23
     dbc:	4c f0       	brlt	.+18     	; 0xdd0 <calc_rotor_slider_value+0x82>
     dbe:	af 01       	movw	r20, r30
     dc0:	9b 01       	movw	r18, r22
     dc2:	bc 01       	movw	r22, r24
     dc4:	c0 e0       	ldi	r28, 0x00	; 0
     dc6:	d0 e2       	ldi	r29, 0x20	; 32
     dc8:	06 c0       	rjmp	.+12     	; 0xdd6 <calc_rotor_slider_value+0x88>
     dca:	ac 01       	movw	r20, r24
     dcc:	9f 01       	movw	r18, r30
     dce:	01 c0       	rjmp	.+2      	; 0xdd2 <calc_rotor_slider_value+0x84>
     dd0:	ac 01       	movw	r20, r24
     dd2:	c0 e0       	ldi	r28, 0x00	; 0
     dd4:	d0 e1       	ldi	r29, 0x10	; 16
     dd6:	64 0f       	add	r22, r20
     dd8:	75 1f       	adc	r23, r21
     dda:	62 1b       	sub	r22, r18
     ddc:	73 0b       	sbc	r23, r19
     dde:	62 1b       	sub	r22, r18
     de0:	73 0b       	sbc	r23, r19
     de2:	ca 01       	movw	r24, r20
     de4:	82 1b       	sub	r24, r18
     de6:	93 0b       	sbc	r25, r19
     de8:	4c e0       	ldi	r20, 0x0C	; 12
     dea:	94 de       	rcall	.-728    	; 0xb14 <divide>
     dec:	c8 0f       	add	r28, r24
     dee:	d9 1f       	adc	r29, r25
     df0:	f8 01       	movw	r30, r16
     df2:	ea 56       	subi	r30, 0x6A	; 106
     df4:	ff 4f       	sbci	r31, 0xFF	; 255
     df6:	04 81       	ldd	r16, Z+4	; 0x04
     df8:	10 e0       	ldi	r17, 0x00	; 0
     dfa:	00 7c       	andi	r16, 0xC0	; 192
     dfc:	10 70       	andi	r17, 0x00	; 0
     dfe:	00 38       	cpi	r16, 0x80	; 128
     e00:	11 05       	cpc	r17, r1
     e02:	81 f4       	brne	.+32     	; 0xe24 <calc_rotor_slider_value+0xd6>
     e04:	ce 01       	movw	r24, r28
     e06:	87 56       	subi	r24, 0x67	; 103
     e08:	92 40       	sbci	r25, 0x02	; 2
     e0a:	2b e2       	ldi	r18, 0x2B	; 43
     e0c:	82 33       	cpi	r24, 0x32	; 50
     e0e:	92 07       	cpc	r25, r18
     e10:	08 f0       	brcs	.+2      	; 0xe14 <calc_rotor_slider_value+0xc6>
     e12:	c4 c0       	rjmp	.+392    	; 0xf9c <calc_rotor_slider_value+0x24e>
     e14:	87 e0       	ldi	r24, 0x07	; 7
     e16:	c3 33       	cpi	r28, 0x33	; 51
     e18:	d8 07       	cpc	r29, r24
     e1a:	08 f4       	brcc	.+2      	; 0xe1e <calc_rotor_slider_value+0xd0>
     e1c:	b6 c0       	rjmp	.+364    	; 0xf8a <calc_rotor_slider_value+0x23c>
     e1e:	c2 53       	subi	r28, 0x32	; 50
     e20:	d7 40       	sbci	r29, 0x07	; 7
     e22:	b5 c0       	rjmp	.+362    	; 0xf8e <calc_rotor_slider_value+0x240>
     e24:	6f ef       	ldi	r22, 0xFF	; 255
     e26:	a6 2e       	mov	r10, r22
     e28:	6f e2       	ldi	r22, 0x2F	; 47
     e2a:	b6 2e       	mov	r11, r22
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	90 e3       	ldi	r25, 0x30	; 48
     e30:	2e 2d       	mov	r18, r14
     e32:	22 95       	swap	r18
     e34:	26 95       	lsr	r18
     e36:	27 70       	andi	r18, 0x07	; 7
     e38:	32 2f       	mov	r19, r18
     e3a:	3f 5f       	subi	r19, 0xFF	; 255
     e3c:	e1 2c       	mov	r14, r1
     e3e:	51 e0       	ldi	r21, 0x01	; 1
     e40:	f5 2e       	mov	r15, r21
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <calc_rotor_slider_value+0xfa>
     e44:	f6 94       	lsr	r15
     e46:	e7 94       	ror	r14
     e48:	2f 5f       	subi	r18, 0xFF	; 255
     e4a:	28 30       	cpi	r18, 0x08	; 8
     e4c:	d8 f3       	brcs	.-10     	; 0xe44 <calc_rotor_slider_value+0xf6>
     e4e:	9e 2c       	mov	r9, r14
     e50:	9a 94       	dec	r9
     e52:	b7 01       	movw	r22, r14
     e54:	35 30       	cpi	r19, 0x05	; 5
     e56:	18 f4       	brcc	.+6      	; 0xe5e <calc_rotor_slider_value+0x110>
     e58:	66 0f       	add	r22, r22
     e5a:	77 1f       	adc	r23, r23
     e5c:	04 c0       	rjmp	.+8      	; 0xe66 <calc_rotor_slider_value+0x118>
     e5e:	37 30       	cpi	r19, 0x07	; 7
     e60:	10 f0       	brcs	.+4      	; 0xe66 <calc_rotor_slider_value+0x118>
     e62:	76 95       	lsr	r23
     e64:	67 95       	ror	r22
     e66:	40 e0       	ldi	r20, 0x00	; 0
     e68:	55 de       	rcall	.-854    	; 0xb14 <divide>
     e6a:	dc 01       	movw	r26, r24
     e6c:	00 34       	cpi	r16, 0x40	; 64
     e6e:	11 05       	cpc	r17, r1
     e70:	f9 f4       	brne	.+62     	; 0xeb0 <calc_rotor_slider_value+0x162>
     e72:	c6 01       	movw	r24, r12
     e74:	63 e0       	ldi	r22, 0x03	; 3
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	e6 d3       	rcall	.+1996   	; 0x1646 <__mulhi3>
     e7a:	fc 01       	movw	r30, r24
     e7c:	ed 53       	subi	r30, 0x3D	; 61
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	80 81       	ld	r24, Z
     e82:	91 81       	ldd	r25, Z+1	; 0x01
     e84:	28 e1       	ldi	r18, 0x18	; 24
     e86:	80 30       	cpi	r24, 0x00	; 0
     e88:	92 07       	cpc	r25, r18
     e8a:	40 f0       	brcs	.+16     	; 0xe9c <calc_rotor_slider_value+0x14e>
     e8c:	80 50       	subi	r24, 0x00	; 0
     e8e:	98 41       	sbci	r25, 0x18	; 24
     e90:	c8 17       	cp	r28, r24
     e92:	d9 07       	cpc	r29, r25
     e94:	68 f4       	brcc	.+26     	; 0xeb0 <calc_rotor_slider_value+0x162>
     e96:	c0 50       	subi	r28, 0x00	; 0
     e98:	d0 4d       	sbci	r29, 0xD0	; 208
     e9a:	0a c0       	rjmp	.+20     	; 0xeb0 <calc_rotor_slider_value+0x162>
     e9c:	9c 01       	movw	r18, r24
     e9e:	20 50       	subi	r18, 0x00	; 0
     ea0:	38 4e       	sbci	r19, 0xE8	; 232
     ea2:	2c 17       	cp	r18, r28
     ea4:	3d 07       	cpc	r19, r29
     ea6:	20 f4       	brcc	.+8      	; 0xeb0 <calc_rotor_slider_value+0x162>
     ea8:	80 50       	subi	r24, 0x00	; 0
     eaa:	90 4d       	sbci	r25, 0xD0	; 208
     eac:	91 83       	std	Z+1, r25	; 0x01
     eae:	80 83       	st	Z, r24
     eb0:	c6 01       	movw	r24, r12
     eb2:	63 e0       	ldi	r22, 0x03	; 3
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	c7 d3       	rcall	.+1934   	; 0x1646 <__mulhi3>
     eb8:	fc 01       	movw	r30, r24
     eba:	ed 53       	subi	r30, 0x3D	; 61
     ebc:	ff 4f       	sbci	r31, 0xFF	; 255
     ebe:	92 81       	ldd	r25, Z+2	; 0x02
     ec0:	90 ff       	sbrs	r25, 0
     ec2:	05 c0       	rjmp	.+10     	; 0xece <calc_rotor_slider_value+0x180>
     ec4:	9e 7f       	andi	r25, 0xFE	; 254
     ec6:	92 83       	std	Z+2, r25	; 0x02
     ec8:	a0 e0       	ldi	r26, 0x00	; 0
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	06 c0       	rjmp	.+12     	; 0xeda <calc_rotor_slider_value+0x18c>
     ece:	91 ff       	sbrs	r25, 1
     ed0:	04 c0       	rjmp	.+8      	; 0xeda <calc_rotor_slider_value+0x18c>
     ed2:	9d 01       	movw	r18, r26
     ed4:	a0 e0       	ldi	r26, 0x00	; 0
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	02 c0       	rjmp	.+4      	; 0xede <calc_rotor_slider_value+0x190>
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	c6 01       	movw	r24, r12
     ee0:	63 e0       	ldi	r22, 0x03	; 3
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	b0 d3       	rcall	.+1888   	; 0x1646 <__mulhi3>
     ee6:	fc 01       	movw	r30, r24
     ee8:	ed 53       	subi	r30, 0x3D	; 61
     eea:	ff 4f       	sbci	r31, 0xFF	; 255
     eec:	40 81       	ld	r20, Z
     eee:	51 81       	ldd	r21, Z+1	; 0x01
     ef0:	24 0f       	add	r18, r20
     ef2:	35 1f       	adc	r19, r21
     ef4:	c2 17       	cp	r28, r18
     ef6:	d3 07       	cpc	r29, r19
     ef8:	18 f0       	brcs	.+6      	; 0xf00 <calc_rotor_slider_value+0x1b2>
     efa:	82 81       	ldd	r24, Z+2	; 0x02
     efc:	8d 7f       	andi	r24, 0xFD	; 253
     efe:	08 c0       	rjmp	.+16     	; 0xf10 <calc_rotor_slider_value+0x1c2>
     f00:	cd 01       	movw	r24, r26
     f02:	8c 0f       	add	r24, r28
     f04:	9d 1f       	adc	r25, r29
     f06:	48 17       	cp	r20, r24
     f08:	59 07       	cpc	r21, r25
     f0a:	28 f0       	brcs	.+10     	; 0xf16 <calc_rotor_slider_value+0x1c8>
     f0c:	82 81       	ldd	r24, Z+2	; 0x02
     f0e:	82 60       	ori	r24, 0x02	; 2
     f10:	82 83       	std	Z+2, r24	; 0x02
     f12:	d1 83       	std	Z+1, r29	; 0x01
     f14:	c0 83       	st	Z, r28
     f16:	c6 01       	movw	r24, r12
     f18:	63 e0       	ldi	r22, 0x03	; 3
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	94 d3       	rcall	.+1832   	; 0x1646 <__mulhi3>
     f1e:	fc 01       	movw	r30, r24
     f20:	ed 53       	subi	r30, 0x3D	; 61
     f22:	ff 4f       	sbci	r31, 0xFF	; 255
     f24:	80 81       	ld	r24, Z
     f26:	91 81       	ldd	r25, Z+1	; 0x01
     f28:	20 e3       	ldi	r18, 0x30	; 48
     f2a:	80 30       	cpi	r24, 0x00	; 0
     f2c:	92 07       	cpc	r25, r18
     f2e:	20 f0       	brcs	.+8      	; 0xf38 <calc_rotor_slider_value+0x1ea>
     f30:	80 50       	subi	r24, 0x00	; 0
     f32:	90 43       	sbci	r25, 0x30	; 48
     f34:	91 83       	std	Z+1, r25	; 0x01
     f36:	80 83       	st	Z, r24
     f38:	c5 01       	movw	r24, r10
     f3a:	b7 01       	movw	r22, r14
     f3c:	40 e0       	ldi	r20, 0x00	; 0
     f3e:	ea dd       	rcall	.-1068   	; 0xb14 <divide>
     f40:	9c 01       	movw	r18, r24
     f42:	c6 01       	movw	r24, r12
     f44:	63 e0       	ldi	r22, 0x03	; 3
     f46:	70 e0       	ldi	r23, 0x00	; 0
     f48:	7e d3       	rcall	.+1788   	; 0x1646 <__mulhi3>
     f4a:	fc 01       	movw	r30, r24
     f4c:	ed 53       	subi	r30, 0x3D	; 61
     f4e:	ff 4f       	sbci	r31, 0xFF	; 255
     f50:	80 81       	ld	r24, Z
     f52:	91 81       	ldd	r25, Z+1	; 0x01
     f54:	b9 01       	movw	r22, r18
     f56:	40 e0       	ldi	r20, 0x00	; 0
     f58:	dd dd       	rcall	.-1094   	; 0xb14 <divide>
     f5a:	49 2d       	mov	r20, r9
     f5c:	50 e0       	ldi	r21, 0x00	; 0
     f5e:	9c 01       	movw	r18, r24
     f60:	48 17       	cp	r20, r24
     f62:	59 07       	cpc	r21, r25
     f64:	08 f4       	brcc	.+2      	; 0xf68 <calc_rotor_slider_value+0x21a>
     f66:	9a 01       	movw	r18, r20
     f68:	f6 01       	movw	r30, r12
     f6a:	e9 58       	subi	r30, 0x89	; 137
     f6c:	ff 4f       	sbci	r31, 0xFF	; 255
     f6e:	81 89       	ldd	r24, Z+17	; 0x11
     f70:	82 17       	cp	r24, r18
     f72:	a1 f0       	breq	.+40     	; 0xf9c <calc_rotor_slider_value+0x24e>
     f74:	21 8b       	std	Z+17, r18	; 0x11
     f76:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <lib_status_flags>
     f7a:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <lib_status_flags+0x1>
     f7e:	84 60       	ori	r24, 0x04	; 4
     f80:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <lib_status_flags+0x1>
     f84:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <lib_status_flags>
     f88:	09 c0       	rjmp	.+18     	; 0xf9c <calc_rotor_slider_value+0x24e>
     f8a:	c0 e0       	ldi	r28, 0x00	; 0
     f8c:	d0 e0       	ldi	r29, 0x00	; 0
     f8e:	bb e9       	ldi	r27, 0x9B	; 155
     f90:	ab 2e       	mov	r10, r27
     f92:	b1 e2       	ldi	r27, 0x21	; 33
     f94:	bb 2e       	mov	r11, r27
     f96:	8b e9       	ldi	r24, 0x9B	; 155
     f98:	91 e2       	ldi	r25, 0x21	; 33
     f9a:	4a cf       	rjmp	.-364    	; 0xe30 <calc_rotor_slider_value+0xe2>
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	eb e0       	ldi	r30, 0x0B	; 11
     fa2:	98 c3       	rjmp	.+1840   	; 0x16d4 <__epilogue_restores__+0xe>

00000fa4 <rotor_slider_enter_detect>:
     fa4:	e8 2f       	mov	r30, r24
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	a3 e0       	ldi	r26, 0x03	; 3
     faa:	ee 0f       	add	r30, r30
     fac:	ff 1f       	adc	r31, r31
     fae:	aa 95       	dec	r26
     fb0:	e1 f7       	brne	.-8      	; 0xfaa <rotor_slider_enter_detect+0x6>
     fb2:	ea 56       	subi	r30, 0x6A	; 106
     fb4:	ff 4f       	sbci	r31, 0xFF	; 255
     fb6:	47 81       	ldd	r20, Z+7	; 0x07
     fb8:	23 ec       	ldi	r18, 0xC3	; 195
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	84 2f       	mov	r24, r20
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	63 e0       	ldi	r22, 0x03	; 3
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	40 d3       	rcall	.+1664   	; 0x1646 <__mulhi3>
     fc6:	f9 01       	movw	r30, r18
     fc8:	e8 0f       	add	r30, r24
     fca:	f9 1f       	adc	r31, r25
     fcc:	84 2f       	mov	r24, r20
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	63 e0       	ldi	r22, 0x03	; 3
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	38 d3       	rcall	.+1648   	; 0x1646 <__mulhi3>
     fd6:	28 0f       	add	r18, r24
     fd8:	39 1f       	adc	r19, r25
     fda:	d9 01       	movw	r26, r18
     fdc:	12 96       	adiw	r26, 0x02	; 2
     fde:	8c 91       	ld	r24, X
     fe0:	12 97       	sbiw	r26, 0x02	; 2
     fe2:	81 60       	ori	r24, 0x01	; 1
     fe4:	82 83       	std	Z+2, r24	; 0x02
     fe6:	08 95       	ret

00000fe8 <delay_cb>:
{
	uint8_t pos = qt_measure_data.qt_touch_status.rotor_slider_values[0];
	pos >>= 6;//top 2 bits give us index of led to light up
	pos &= 0x03;
	return pos;
}
     fe8:	2f ef       	ldi	r18, 0xFF	; 255
     fea:	89 e6       	ldi	r24, 0x69	; 105
     fec:	98 e1       	ldi	r25, 0x18	; 24
     fee:	21 50       	subi	r18, 0x01	; 1
     ff0:	80 40       	sbci	r24, 0x00	; 0
     ff2:	90 40       	sbci	r25, 0x00	; 0
     ff4:	e1 f7       	brne	.-8      	; 0xfee <delay_cb+0x6>
     ff6:	00 c0       	rjmp	.+0      	; 0xff8 <delay_cb+0x10>
     ff8:	00 00       	nop
     ffa:	08 95       	ret

00000ffc <rotor_touched>:

bool rotor_touched()
{
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <qt_measure_data+0x10>
    1002:	91 11       	cpse	r25, r1
    1004:	01 c0       	rjmp	.+2      	; 0x1008 <rotor_touched+0xc>
    1006:	80 e0       	ldi	r24, 0x00	; 0
	if(qt_measure_data.qt_touch_status.sensor_states[0])
		return true;
	return false;
}
    1008:	08 95       	ret

0000100a <update_rotor_leds>:

void update_rotor_leds(void)
{
	if(rotor_touched())
    100a:	f8 df       	rcall	.-16     	; 0xffc <rotor_touched>
    100c:	88 23       	and	r24, r24
    100e:	39 f0       	breq	.+14     	; 0x101e <update_rotor_leds+0x14>
	{
		uint8_t pos = get_rotor_pos();
		io_rotor_set(pos);
    1010:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <qt_measure_data+0x11>
    1014:	82 95       	swap	r24
    1016:	86 95       	lsr	r24
    1018:	86 95       	lsr	r24
    101a:	83 70       	andi	r24, 0x03	; 3
    101c:	96 c1       	rjmp	.+812    	; 0x134a <io_rotor_set>
	}
	else
		io_rotor_off();
    101e:	8a c1       	rjmp	.+788    	; 0x1334 <io_rotor_off>

00001020 <song_and_dance>:
}
void song_and_dance(void)
{
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
    1024:	c4 e0       	ldi	r28, 0x04	; 4
    1026:	d0 e0       	ldi	r29, 0x00	; 0
		int d = 250;
		//do a startup pattern
		int i;
		for(i=0;i<4;i++)
		{
			io_all_on();
    1028:	41 d1       	rcall	.+642    	; 0x12ac <io_all_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    102a:	2f e7       	ldi	r18, 0x7F	; 127
    102c:	8a e1       	ldi	r24, 0x1A	; 26
    102e:	96 e0       	ldi	r25, 0x06	; 6
    1030:	21 50       	subi	r18, 0x01	; 1
    1032:	80 40       	sbci	r24, 0x00	; 0
    1034:	90 40       	sbci	r25, 0x00	; 0
    1036:	e1 f7       	brne	.-8      	; 0x1030 <song_and_dance+0x10>
    1038:	00 c0       	rjmp	.+0      	; 0x103a <song_and_dance+0x1a>
    103a:	00 00       	nop
			_delay_ms(d);
			io_all_off();
    103c:	3e d1       	rcall	.+636    	; 0x12ba <io_all_off>
    103e:	2f e7       	ldi	r18, 0x7F	; 127
    1040:	8a e1       	ldi	r24, 0x1A	; 26
    1042:	96 e0       	ldi	r25, 0x06	; 6
    1044:	21 50       	subi	r18, 0x01	; 1
    1046:	80 40       	sbci	r24, 0x00	; 0
    1048:	90 40       	sbci	r25, 0x00	; 0
    104a:	e1 f7       	brne	.-8      	; 0x1044 <song_and_dance+0x24>
    104c:	00 c0       	rjmp	.+0      	; 0x104e <song_and_dance+0x2e>
    104e:	00 00       	nop
    1050:	21 97       	sbiw	r28, 0x01	; 1
void song_and_dance(void)
{
		int d = 250;
		//do a startup pattern
		int i;
		for(i=0;i<4;i++)
    1052:	51 f7       	brne	.-44     	; 0x1028 <song_and_dance+0x8>
			_delay_ms(d);
			io_all_off();
			_delay_ms(d);
		}
		
		io_all_off();
    1054:	32 d1       	rcall	.+612    	; 0x12ba <io_all_off>
		for(i=0;i<2;i++)
		{
			io_led(LED_TEMP,0);
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	84 e0       	ldi	r24, 0x04	; 4
    105c:	35 d1       	rcall	.+618    	; 0x12c8 <io_led>
    105e:	2f ef       	ldi	r18, 0xFF	; 255
    1060:	80 e7       	ldi	r24, 0x70	; 112
    1062:	92 e0       	ldi	r25, 0x02	; 2
    1064:	21 50       	subi	r18, 0x01	; 1
    1066:	80 40       	sbci	r24, 0x00	; 0
    1068:	90 40       	sbci	r25, 0x00	; 0
    106a:	e1 f7       	brne	.-8      	; 0x1064 <song_and_dance+0x44>
    106c:	00 c0       	rjmp	.+0      	; 0x106e <song_and_dance+0x4e>
    106e:	00 00       	nop
			_delay_ms(100);
			io_led(LED_TEMP,1);
    1070:	61 e0       	ldi	r22, 0x01	; 1
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	84 e0       	ldi	r24, 0x04	; 4
    1076:	28 d1       	rcall	.+592    	; 0x12c8 <io_led>
    1078:	2f ef       	ldi	r18, 0xFF	; 255
    107a:	80 e7       	ldi	r24, 0x70	; 112
    107c:	92 e0       	ldi	r25, 0x02	; 2
    107e:	21 50       	subi	r18, 0x01	; 1
    1080:	80 40       	sbci	r24, 0x00	; 0
    1082:	90 40       	sbci	r25, 0x00	; 0
    1084:	e1 f7       	brne	.-8      	; 0x107e <song_and_dance+0x5e>
    1086:	00 c0       	rjmp	.+0      	; 0x1088 <song_and_dance+0x68>
    1088:	00 00       	nop
		}
		
		io_all_off();
		for(i=0;i<2;i++)
		{
			io_led(LED_TEMP,0);
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	84 e0       	ldi	r24, 0x04	; 4
    1090:	1b d1       	rcall	.+566    	; 0x12c8 <io_led>
    1092:	2f ef       	ldi	r18, 0xFF	; 255
    1094:	80 e7       	ldi	r24, 0x70	; 112
    1096:	92 e0       	ldi	r25, 0x02	; 2
    1098:	21 50       	subi	r18, 0x01	; 1
    109a:	80 40       	sbci	r24, 0x00	; 0
    109c:	90 40       	sbci	r25, 0x00	; 0
    109e:	e1 f7       	brne	.-8      	; 0x1098 <song_and_dance+0x78>
    10a0:	00 c0       	rjmp	.+0      	; 0x10a2 <song_and_dance+0x82>
    10a2:	00 00       	nop
			_delay_ms(100);
			io_led(LED_TEMP,1);
    10a4:	61 e0       	ldi	r22, 0x01	; 1
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	84 e0       	ldi	r24, 0x04	; 4
    10aa:	0e d1       	rcall	.+540    	; 0x12c8 <io_led>
    10ac:	2f ef       	ldi	r18, 0xFF	; 255
    10ae:	80 e7       	ldi	r24, 0x70	; 112
    10b0:	92 e0       	ldi	r25, 0x02	; 2
    10b2:	21 50       	subi	r18, 0x01	; 1
    10b4:	80 40       	sbci	r24, 0x00	; 0
    10b6:	90 40       	sbci	r25, 0x00	; 0
    10b8:	e1 f7       	brne	.-8      	; 0x10b2 <song_and_dance+0x92>
    10ba:	00 c0       	rjmp	.+0      	; 0x10bc <song_and_dance+0x9c>
    10bc:	00 00       	nop
			_delay_ms(100);
		}
}
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	08 95       	ret

000010c4 <main>:
}
int main( void )
{
	uint16_t temperature;
   /* initialise host app, pins, watchdog, etc */
    init_system();
    10c4:	75 d2       	rcall	.+1258   	; 0x15b0 <init_system>

    /* configure timer ISR to fire regularly */
    init_timer_isr();
    10c6:	0a d2       	rcall	.+1044   	; 0x14dc <init_timer_isr>

	/* Initialize Touch sensors */
	touch_init();
    10c8:	7b d2       	rcall	.+1270   	; 0x15c0 <touch_init>

	io_init();
    10ca:	e9 d0       	rcall	.+466    	; 0x129e <io_init>
	adc_init();
    10cc:	c1 d0       	rcall	.+386    	; 0x1250 <adc_init>
    /* enable interrupts */
    __enable_interrupt();
    10ce:	78 94       	sei
	
	song_and_dance();
    10d0:	a7 df       	rcall	.-178    	; 0x1020 <song_and_dance>
	temperature = adc_get_reading();
    10d2:	cc d0       	rcall	.+408    	; 0x126c <adc_get_reading>
    10d4:	ec 01       	movw	r28, r24
	io_all_off();
    10d6:	f1 d0       	rcall	.+482    	; 0x12ba <io_all_off>
		
		uint16_t t = adc_get_reading();
		
		//if they drop the temperature by 15 degrees, output
		
		if (t <= (temperature - 15))
    10d8:	2f 97       	sbiw	r28, 0x0f	; 15
	io_all_off();
    /* loop forever */
	bool rotor_solved = false;
    for( ; ; )
    {
        touch_measure();
    10da:	a7 d2       	rcall	.+1358   	; 0x162a <touch_measure>
		update_rotor_leds();
    10dc:	96 df       	rcall	.-212    	; 0x100a <update_rotor_leds>
		
		if (rotor_touched())
    10de:	8e df       	rcall	.-228    	; 0xffc <rotor_touched>
    10e0:	88 23       	and	r24, r24
    10e2:	51 f1       	breq	.+84     	; 0x1138 <main+0x74>
uint64_t last_temp_time = 0u;

uint8_t get_rotor_pos()
{
	uint8_t pos = qt_measure_data.qt_touch_status.rotor_slider_values[0];
	pos >>= 6;//top 2 bits give us index of led to light up
    10e4:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <qt_measure_data+0x11>
    10e8:	82 95       	swap	r24
    10ea:	86 95       	lsr	r24
    10ec:	86 95       	lsr	r24
    10ee:	83 70       	andi	r24, 0x03	; 3
		update_rotor_leds();
		
		if (rotor_touched())
		{
			uint8_t step = get_rotor_pos();
			last_poke_time = current_time;
    10f0:	e0 91 dc 00 	lds	r30, 0x00DC	; 0x8000dc <current_time>
    10f4:	70 91 dd 00 	lds	r23, 0x00DD	; 0x8000dd <current_time+0x1>
    10f8:	60 91 de 00 	lds	r22, 0x00DE	; 0x8000de <current_time+0x2>
    10fc:	50 91 df 00 	lds	r21, 0x00DF	; 0x8000df <current_time+0x3>
    1100:	40 91 e0 00 	lds	r20, 0x00E0	; 0x8000e0 <current_time+0x4>
    1104:	30 91 e1 00 	lds	r19, 0x00E1	; 0x8000e1 <current_time+0x5>
    1108:	20 91 e2 00 	lds	r18, 0x00E2	; 0x8000e2 <current_time+0x6>
    110c:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <current_time+0x7>
    1110:	e0 93 d4 00 	sts	0x00D4, r30	; 0x8000d4 <last_poke_time>
    1114:	70 93 d5 00 	sts	0x00D5, r23	; 0x8000d5 <last_poke_time+0x1>
    1118:	60 93 d6 00 	sts	0x00D6, r22	; 0x8000d6 <last_poke_time+0x2>
    111c:	50 93 d7 00 	sts	0x00D7, r21	; 0x8000d7 <last_poke_time+0x3>
    1120:	40 93 d8 00 	sts	0x00D8, r20	; 0x8000d8 <last_poke_time+0x4>
    1124:	30 93 d9 00 	sts	0x00D9, r19	; 0x8000d9 <last_poke_time+0x5>
    1128:	20 93 da 00 	sts	0x00DA, r18	; 0x8000da <last_poke_time+0x6>
    112c:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <last_poke_time+0x7>
			if(puzzle_rotor_step(step))
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	a2 d1       	rcall	.+836    	; 0x1478 <puzzle_rotor_step>
    1134:	98 2e       	mov	r9, r24
    1136:	01 c0       	rjmp	.+2      	; 0x113a <main+0x76>
    1138:	91 2c       	mov	r9, r1
			{
				rotor_solved=true;
			}
		}
		if (current_time - last_poke_time > 1000)
    113a:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <current_time>
    113e:	30 91 dd 00 	lds	r19, 0x00DD	; 0x8000dd <current_time+0x1>
    1142:	40 91 de 00 	lds	r20, 0x00DE	; 0x8000de <current_time+0x2>
    1146:	50 91 df 00 	lds	r21, 0x00DF	; 0x8000df <current_time+0x3>
    114a:	60 91 e0 00 	lds	r22, 0x00E0	; 0x8000e0 <current_time+0x4>
    114e:	70 91 e1 00 	lds	r23, 0x00E1	; 0x8000e1 <current_time+0x5>
    1152:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <current_time+0x6>
    1156:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <current_time+0x7>
    115a:	a0 90 d4 00 	lds	r10, 0x00D4	; 0x8000d4 <last_poke_time>
    115e:	b0 90 d5 00 	lds	r11, 0x00D5	; 0x8000d5 <last_poke_time+0x1>
    1162:	c0 90 d6 00 	lds	r12, 0x00D6	; 0x8000d6 <last_poke_time+0x2>
    1166:	d0 90 d7 00 	lds	r13, 0x00D7	; 0x8000d7 <last_poke_time+0x3>
    116a:	e0 90 d8 00 	lds	r14, 0x00D8	; 0x8000d8 <last_poke_time+0x4>
    116e:	f0 90 d9 00 	lds	r15, 0x00D9	; 0x8000d9 <last_poke_time+0x5>
    1172:	00 91 da 00 	lds	r16, 0x00DA	; 0x8000da <last_poke_time+0x6>
    1176:	10 91 db 00 	lds	r17, 0x00DB	; 0x8000db <last_poke_time+0x7>
    117a:	cc d2       	rcall	.+1432   	; 0x1714 <__subdi3>
    117c:	28 3e       	cpi	r18, 0xE8	; 232
    117e:	33 40       	sbci	r19, 0x03	; 3
    1180:	41 05       	cpc	r20, r1
    1182:	51 05       	cpc	r21, r1
    1184:	61 05       	cpc	r22, r1
    1186:	71 05       	cpc	r23, r1
    1188:	81 05       	cpc	r24, r1
    118a:	91 05       	cpc	r25, r1
    118c:	11 f0       	breq	.+4      	; 0x1192 <main+0xce>
    118e:	08 f0       	brcs	.+2      	; 0x1192 <main+0xce>
			puzzle_rotor_reset();
    1190:	6a d1       	rcall	.+724    	; 0x1466 <puzzle_rotor_reset>
		
		if(rotor_solved)
    1192:	99 20       	and	r9, r9
    1194:	31 f0       	breq	.+12     	; 0x11a2 <main+0xde>
		{
			puzzle_rotor_reset();
    1196:	67 d1       	rcall	.+718    	; 0x1466 <puzzle_rotor_reset>
			rotor_solved=false;
			
			puzzle_rotor_solved(io_output_char,delay_cb);
    1198:	64 ef       	ldi	r22, 0xF4	; 244
    119a:	77 e0       	ldi	r23, 0x07	; 7
    119c:	8f eb       	ldi	r24, 0xBF	; 191
    119e:	99 e0       	ldi	r25, 0x09	; 9
    11a0:	97 d1       	rcall	.+814    	; 0x14d0 <puzzle_rotor_solved>
		}
		
		uint16_t t = adc_get_reading();
    11a2:	64 d0       	rcall	.+200    	; 0x126c <adc_get_reading>
		
		//if they drop the temperature by 15 degrees, output
		
		if (t <= (temperature - 15))
    11a4:	c8 17       	cp	r28, r24
    11a6:	d9 07       	cpc	r29, r25
    11a8:	08 f4       	brcc	.+2      	; 0x11ac <main+0xe8>
    11aa:	97 cf       	rjmp	.-210    	; 0x10da <main+0x16>
		{
			if (current_time - last_temp_time > 30000UL)//30 seconds
    11ac:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <current_time>
    11b0:	30 91 dd 00 	lds	r19, 0x00DD	; 0x8000dd <current_time+0x1>
    11b4:	40 91 de 00 	lds	r20, 0x00DE	; 0x8000de <current_time+0x2>
    11b8:	50 91 df 00 	lds	r21, 0x00DF	; 0x8000df <current_time+0x3>
    11bc:	60 91 e0 00 	lds	r22, 0x00E0	; 0x8000e0 <current_time+0x4>
    11c0:	70 91 e1 00 	lds	r23, 0x00E1	; 0x8000e1 <current_time+0x5>
    11c4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <current_time+0x6>
    11c8:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <current_time+0x7>
    11cc:	a0 90 cc 00 	lds	r10, 0x00CC	; 0x8000cc <last_temp_time>
    11d0:	b0 90 cd 00 	lds	r11, 0x00CD	; 0x8000cd <last_temp_time+0x1>
    11d4:	c0 90 ce 00 	lds	r12, 0x00CE	; 0x8000ce <last_temp_time+0x2>
    11d8:	d0 90 cf 00 	lds	r13, 0x00CF	; 0x8000cf <last_temp_time+0x3>
    11dc:	e0 90 d0 00 	lds	r14, 0x00D0	; 0x8000d0 <last_temp_time+0x4>
    11e0:	f0 90 d1 00 	lds	r15, 0x00D1	; 0x8000d1 <last_temp_time+0x5>
    11e4:	00 91 d2 00 	lds	r16, 0x00D2	; 0x8000d2 <last_temp_time+0x6>
    11e8:	10 91 d3 00 	lds	r17, 0x00D3	; 0x8000d3 <last_temp_time+0x7>
    11ec:	93 d2       	rcall	.+1318   	; 0x1714 <__subdi3>
    11ee:	20 33       	cpi	r18, 0x30	; 48
    11f0:	35 47       	sbci	r19, 0x75	; 117
    11f2:	41 05       	cpc	r20, r1
    11f4:	51 05       	cpc	r21, r1
    11f6:	61 05       	cpc	r22, r1
    11f8:	71 05       	cpc	r23, r1
    11fa:	81 05       	cpc	r24, r1
    11fc:	91 05       	cpc	r25, r1
    11fe:	09 f0       	breq	.+2      	; 0x1202 <main+0x13e>
    1200:	08 f4       	brcc	.+2      	; 0x1204 <main+0x140>
    1202:	6b cf       	rjmp	.-298    	; 0x10da <main+0x16>
			{
				puzzle_temp_solved(io_output_char,delay_cb);
    1204:	64 ef       	ldi	r22, 0xF4	; 244
    1206:	77 e0       	ldi	r23, 0x07	; 7
    1208:	8f eb       	ldi	r24, 0xBF	; 191
    120a:	99 e0       	ldi	r25, 0x09	; 9
    120c:	64 d1       	rcall	.+712    	; 0x14d6 <puzzle_temp_solved>
				last_temp_time =current_time;			
    120e:	70 91 dc 00 	lds	r23, 0x00DC	; 0x8000dc <current_time>
    1212:	60 91 dd 00 	lds	r22, 0x00DD	; 0x8000dd <current_time+0x1>
    1216:	50 91 de 00 	lds	r21, 0x00DE	; 0x8000de <current_time+0x2>
    121a:	40 91 df 00 	lds	r20, 0x00DF	; 0x8000df <current_time+0x3>
    121e:	30 91 e0 00 	lds	r19, 0x00E0	; 0x8000e0 <current_time+0x4>
    1222:	20 91 e1 00 	lds	r18, 0x00E1	; 0x8000e1 <current_time+0x5>
    1226:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <current_time+0x6>
    122a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <current_time+0x7>
    122e:	70 93 cc 00 	sts	0x00CC, r23	; 0x8000cc <last_temp_time>
    1232:	60 93 cd 00 	sts	0x00CD, r22	; 0x8000cd <last_temp_time+0x1>
    1236:	50 93 ce 00 	sts	0x00CE, r21	; 0x8000ce <last_temp_time+0x2>
    123a:	40 93 cf 00 	sts	0x00CF, r20	; 0x8000cf <last_temp_time+0x3>
    123e:	30 93 d0 00 	sts	0x00D0, r19	; 0x8000d0 <last_temp_time+0x4>
    1242:	20 93 d1 00 	sts	0x00D1, r18	; 0x8000d1 <last_temp_time+0x5>
    1246:	90 93 d2 00 	sts	0x00D2, r25	; 0x8000d2 <last_temp_time+0x6>
    124a:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <last_temp_time+0x7>
    124e:	45 cf       	rjmp	.-374    	; 0x10da <main+0x16>

00001250 <adc_init>:
	   Selecting the ADC8 channel by writing the MUX[5:0] bits in
	   ADMUX register to “100010” enables the temperature sensor. The internal 1.1V reference must
	   also be selected for the ADC reference source in the temperature sensor measurement. 
	 */

	ADMUX =
    1250:	82 ea       	ldi	r24, 0xA2	; 162
    1252:	87 b9       	out	0x07, r24	; 7
		(0 << MUX3)  |     // use ADC8 for temperature, MUX bit 3
		(0 << MUX2)  |     // use ADC8 for temperature, MUX bit 2
		(1 << MUX1)  |     // use ADC8 for temperature, MUX bit 1
		(0 << MUX0);       // use ADC8 for temperature, MUX bit 0

	ADCSRA = 
    1254:	87 e8       	ldi	r24, 0x87	; 135
    1256:	86 b9       	out	0x06, r24	; 6
		(1 << ADEN)  |     // Enable ADC 
		(1 << ADPS2) |     // set prescaler to 128, bit 2 
		(1 << ADPS1) |     // set prescaler to 128, bit 1 
		(1 << ADPS0);      // set prescaler to 128, bit 0 

	ADCSRB = 
    1258:	13 b8       	out	0x03, r1	; 3
    125a:	08 95       	ret

0000125c <adc_measure>:
}
//T = k * [(ADCH << 8) | ADCL] + T_os

uint16_t adc_measure()
{
	ADCSRA |= (1 << ADSC);         // start ADC measurement
    125c:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1 << ADSC) ); // wait till conversion complete 
    125e:	36 99       	sbic	0x06, 6	; 6
    1260:	fe cf       	rjmp	.-4      	; 0x125e <adc_measure+0x2>
	uint16_t result = ADCL;
    1262:	84 b1       	in	r24, 0x04	; 4
	result |= ADCH<<8;
    1264:	25 b1       	in	r18, 0x05	; 5
	return result;
    1266:	90 e0       	ldi	r25, 0x00	; 0
}
    1268:	92 2b       	or	r25, r18
    126a:	08 95       	ret

0000126c <adc_get_reading>:

uint16_t adc_get_reading()
{
    126c:	0f 93       	push	r16
    126e:	1f 93       	push	r17
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	00 e2       	ldi	r16, 0x20	; 32
    1276:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t sum=0;  //each reading is 10 bits.  we can sum 2^6 of them
    1278:	c0 e0       	ldi	r28, 0x00	; 0
    127a:	d0 e0       	ldi	r29, 0x00	; 0
	int i;
	for(i=0;i<32;i++)
		sum+=adc_measure();
    127c:	ef df       	rcall	.-34     	; 0x125c <adc_measure>
    127e:	c8 0f       	add	r28, r24
    1280:	d9 1f       	adc	r29, r25
    1282:	01 50       	subi	r16, 0x01	; 1
    1284:	11 09       	sbc	r17, r1

uint16_t adc_get_reading()
{
	uint16_t sum=0;  //each reading is 10 bits.  we can sum 2^6 of them
	int i;
	for(i=0;i<32;i++)
    1286:	d1 f7       	brne	.-12     	; 0x127c <adc_get_reading+0x10>
		sum+=adc_measure();
	return sum>>5;
}
    1288:	ce 01       	movw	r24, r28
    128a:	25 e0       	ldi	r18, 0x05	; 5
    128c:	96 95       	lsr	r25
    128e:	87 95       	ror	r24
    1290:	2a 95       	dec	r18
    1292:	e1 f7       	brne	.-8      	; 0x128c <adc_get_reading+0x20>
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	1f 91       	pop	r17
    129a:	0f 91       	pop	r16
    129c:	08 95       	ret

0000129e <io_init>:
    {
        io_led( i, (i == state ? 1 : 0)  );
    }
    
	state = (state + 1) % 4;
}
    129e:	80 e3       	ldi	r24, 0x30	; 48
    12a0:	8a bb       	out	0x1a, r24	; 26
    12a2:	87 e0       	ldi	r24, 0x07	; 7
    12a4:	87 bb       	out	0x17, r24	; 23
    12a6:	1b ba       	out	0x1b, r1	; 27
    12a8:	18 ba       	out	0x18, r1	; 24
    12aa:	08 95       	ret

000012ac <io_all_on>:
    12ac:	8b b3       	in	r24, 0x1b	; 27
    12ae:	80 63       	ori	r24, 0x30	; 48
    12b0:	8b bb       	out	0x1b, r24	; 27
    12b2:	88 b3       	in	r24, 0x18	; 24
    12b4:	87 60       	ori	r24, 0x07	; 7
    12b6:	88 bb       	out	0x18, r24	; 24
    12b8:	08 95       	ret

000012ba <io_all_off>:
    12ba:	8b b3       	in	r24, 0x1b	; 27
    12bc:	8f 7c       	andi	r24, 0xCF	; 207
    12be:	8b bb       	out	0x1b, r24	; 27
    12c0:	88 b3       	in	r24, 0x18	; 24
    12c2:	88 7f       	andi	r24, 0xF8	; 248
    12c4:	88 bb       	out	0x18, r24	; 24
    12c6:	08 95       	ret

000012c8 <io_led>:
    12c8:	82 30       	cpi	r24, 0x02	; 2
    12ca:	59 f0       	breq	.+22     	; 0x12e2 <io_led+0x1a>
    12cc:	28 f4       	brcc	.+10     	; 0x12d8 <io_led+0x10>
    12ce:	88 23       	and	r24, r24
    12d0:	61 f0       	breq	.+24     	; 0x12ea <io_led+0x22>
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	61 f0       	breq	.+24     	; 0x12ee <io_led+0x26>
    12d6:	08 95       	ret
    12d8:	83 30       	cpi	r24, 0x03	; 3
    12da:	69 f0       	breq	.+26     	; 0x12f6 <io_led+0x2e>
    12dc:	84 30       	cpi	r24, 0x04	; 4
    12de:	19 f0       	breq	.+6      	; 0x12e6 <io_led+0x1e>
    12e0:	08 95       	ret
    12e2:	82 e0       	ldi	r24, 0x02	; 2
    12e4:	05 c0       	rjmp	.+10     	; 0x12f0 <io_led+0x28>
    12e6:	84 e0       	ldi	r24, 0x04	; 4
    12e8:	07 c0       	rjmp	.+14     	; 0x12f8 <io_led+0x30>
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	01 c0       	rjmp	.+2      	; 0x12f0 <io_led+0x28>
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	e8 e3       	ldi	r30, 0x38	; 56
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	03 c0       	rjmp	.+6      	; 0x12fc <io_led+0x34>
    12f6:	85 e0       	ldi	r24, 0x05	; 5
    12f8:	eb e3       	ldi	r30, 0x3B	; 59
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	67 2b       	or	r22, r23
    12fe:	61 f0       	breq	.+24     	; 0x1318 <io_led+0x50>
    1300:	40 81       	ld	r20, Z
    1302:	21 e0       	ldi	r18, 0x01	; 1
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	b9 01       	movw	r22, r18
    1308:	02 c0       	rjmp	.+4      	; 0x130e <io_led+0x46>
    130a:	66 0f       	add	r22, r22
    130c:	77 1f       	adc	r23, r23
    130e:	8a 95       	dec	r24
    1310:	e2 f7       	brpl	.-8      	; 0x130a <io_led+0x42>
    1312:	cb 01       	movw	r24, r22
    1314:	84 2b       	or	r24, r20
    1316:	0c c0       	rjmp	.+24     	; 0x1330 <io_led+0x68>
    1318:	40 81       	ld	r20, Z
    131a:	21 e0       	ldi	r18, 0x01	; 1
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	b9 01       	movw	r22, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <io_led+0x5e>
    1322:	66 0f       	add	r22, r22
    1324:	77 1f       	adc	r23, r23
    1326:	8a 95       	dec	r24
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <io_led+0x5a>
    132a:	cb 01       	movw	r24, r22
    132c:	80 95       	com	r24
    132e:	84 23       	and	r24, r20
    1330:	80 83       	st	Z, r24
    1332:	08 95       	ret

00001334 <io_rotor_off>:

void io_rotor_off(void)
{
    1334:	cf 93       	push	r28
    1336:	c0 e0       	ldi	r28, 0x00	; 0
	int i;
	for(i=0;i<4;i++)
		io_led(i,0);
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	8c 2f       	mov	r24, r28
    133e:	c4 df       	rcall	.-120    	; 0x12c8 <io_led>
    1340:	cf 5f       	subi	r28, 0xFF	; 255
}

void io_rotor_off(void)
{
	int i;
	for(i=0;i<4;i++)
    1342:	c4 30       	cpi	r28, 0x04	; 4
    1344:	c9 f7       	brne	.-14     	; 0x1338 <io_rotor_off+0x4>
		io_led(i,0);
}
    1346:	cf 91       	pop	r28
    1348:	08 95       	ret

0000134a <io_rotor_set>:

void io_rotor_set(uint8_t state)
{
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    int i;
    for(i=0;i<4;i++)
    1352:	c0 e0       	ldi	r28, 0x00	; 0
    1354:	d0 e0       	ldi	r29, 0x00	; 0
    {
        io_led( i, (i == state ? 1 : 0)  );
    1356:	08 2f       	mov	r16, r24
    1358:	10 e0       	ldi	r17, 0x00	; 0
    135a:	61 e0       	ldi	r22, 0x01	; 1
    135c:	70 e0       	ldi	r23, 0x00	; 0
    135e:	0c 17       	cp	r16, r28
    1360:	1d 07       	cpc	r17, r29
    1362:	11 f0       	breq	.+4      	; 0x1368 <io_rotor_set+0x1e>
    1364:	60 e0       	ldi	r22, 0x00	; 0
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	8c 2f       	mov	r24, r28
    136a:	ae df       	rcall	.-164    	; 0x12c8 <io_led>
}

void io_rotor_set(uint8_t state)
{
    int i;
    for(i=0;i<4;i++)
    136c:	21 96       	adiw	r28, 0x01	; 1
    136e:	c4 30       	cpi	r28, 0x04	; 4
    1370:	d1 05       	cpc	r29, r1
    1372:	99 f7       	brne	.-26     	; 0x135a <io_rotor_set+0x10>
    {
        io_led( i, (i == state ? 1 : 0)  );
    }

}
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	1f 91       	pop	r17
    137a:	0f 91       	pop	r16
    137c:	08 95       	ret

0000137e <io_output_char>:

void io_output_char(char in)
{
    137e:	cf 93       	push	r28
    1380:	c8 2f       	mov	r28, r24
	io_led(LED_ROTOR_1,(in & 1));
    1382:	68 2f       	mov	r22, r24
    1384:	61 70       	andi	r22, 0x01	; 1
    1386:	70 e0       	ldi	r23, 0x00	; 0
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	9e df       	rcall	.-196    	; 0x12c8 <io_led>
	io_led(LED_ROTOR_2,(in & 2));
    138c:	6c 2f       	mov	r22, r28
    138e:	62 70       	andi	r22, 0x02	; 2
    1390:	70 e0       	ldi	r23, 0x00	; 0
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	99 df       	rcall	.-206    	; 0x12c8 <io_led>
	io_led(LED_ROTOR_3,(in & 4));
    1396:	6c 2f       	mov	r22, r28
    1398:	64 70       	andi	r22, 0x04	; 4
    139a:	70 e0       	ldi	r23, 0x00	; 0
    139c:	82 e0       	ldi	r24, 0x02	; 2
    139e:	94 df       	rcall	.-216    	; 0x12c8 <io_led>
	io_led(LED_ROTOR_4,(in & 8));
    13a0:	6c 2f       	mov	r22, r28
    13a2:	68 70       	andi	r22, 0x08	; 8
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	83 e0       	ldi	r24, 0x03	; 3
    13a8:	8f df       	rcall	.-226    	; 0x12c8 <io_led>
	
	io_led(LED_TEMP,in);
    13aa:	6c 2f       	mov	r22, r28
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	84 e0       	ldi	r24, 0x04	; 4
    13b0:	cf 91       	pop	r28
	io_led(LED_ROTOR_1,(in & 1));
	io_led(LED_ROTOR_2,(in & 2));
	io_led(LED_ROTOR_3,(in & 4));
	io_led(LED_ROTOR_4,(in & 8));
	
	io_led(LED_TEMP,in);
    13b2:	8a cf       	rjmp	.-236    	; 0x12c8 <io_led>

000013b4 <pattern_output.isra.0>:
    else
        count=0;
    if(count >= 4)
        return true;
    return false;
}
    13b4:	cf 92       	push	r12
    13b6:	df 92       	push	r13
    13b8:	ef 92       	push	r14
    13ba:	ff 92       	push	r15
    13bc:	0f 93       	push	r16
    13be:	1f 93       	push	r17
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	7c 01       	movw	r14, r24
    13c6:	eb 01       	movw	r28, r22
    13c8:	8b 01       	movw	r16, r22
    13ca:	fe 01       	movw	r30, r28
    13cc:	01 90       	ld	r0, Z+
    13ce:	00 20       	and	r0, r0
    13d0:	e9 f7       	brne	.-6      	; 0x13cc <pattern_output.isra.0+0x18>
    13d2:	31 97       	sbiw	r30, 0x01	; 1
    13d4:	ec 1b       	sub	r30, r28
    13d6:	fd 0b       	sbc	r31, r29
    13d8:	c8 01       	movw	r24, r16
    13da:	8c 1b       	sub	r24, r28
    13dc:	9d 0b       	sbc	r25, r29
    13de:	8e 17       	cp	r24, r30
    13e0:	9f 07       	cpc	r25, r31
    13e2:	c0 f5       	brcc	.+112    	; 0x1454 <pattern_output.isra.0+0xa0>
    13e4:	68 01       	movw	r12, r16
    13e6:	f8 01       	movw	r30, r16
    13e8:	81 91       	ld	r24, Z+
    13ea:	8f 01       	movw	r16, r30
    13ec:	82 95       	swap	r24
    13ee:	8f 70       	andi	r24, 0x0F	; 15
    13f0:	f7 01       	movw	r30, r14
    13f2:	09 95       	icall
    13f4:	ff ef       	ldi	r31, 0xFF	; 255
    13f6:	29 e6       	ldi	r18, 0x69	; 105
    13f8:	88 e1       	ldi	r24, 0x18	; 24
    13fa:	f1 50       	subi	r31, 0x01	; 1
    13fc:	20 40       	sbci	r18, 0x00	; 0
    13fe:	80 40       	sbci	r24, 0x00	; 0
    1400:	e1 f7       	brne	.-8      	; 0x13fa <pattern_output.isra.0+0x46>
    1402:	00 c0       	rjmp	.+0      	; 0x1404 <pattern_output.isra.0+0x50>
    1404:	00 00       	nop
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	f7 01       	movw	r30, r14
    140a:	09 95       	icall
    140c:	ff ef       	ldi	r31, 0xFF	; 255
    140e:	24 e3       	ldi	r18, 0x34	; 52
    1410:	8c e0       	ldi	r24, 0x0C	; 12
    1412:	f1 50       	subi	r31, 0x01	; 1
    1414:	20 40       	sbci	r18, 0x00	; 0
    1416:	80 40       	sbci	r24, 0x00	; 0
    1418:	e1 f7       	brne	.-8      	; 0x1412 <pattern_output.isra.0+0x5e>
    141a:	00 c0       	rjmp	.+0      	; 0x141c <pattern_output.isra.0+0x68>
    141c:	00 00       	nop
    141e:	f6 01       	movw	r30, r12
    1420:	80 81       	ld	r24, Z
    1422:	8f 70       	andi	r24, 0x0F	; 15
    1424:	f7 01       	movw	r30, r14
    1426:	09 95       	icall
    1428:	ff ef       	ldi	r31, 0xFF	; 255
    142a:	29 e6       	ldi	r18, 0x69	; 105
    142c:	88 e1       	ldi	r24, 0x18	; 24
    142e:	f1 50       	subi	r31, 0x01	; 1
    1430:	20 40       	sbci	r18, 0x00	; 0
    1432:	80 40       	sbci	r24, 0x00	; 0
    1434:	e1 f7       	brne	.-8      	; 0x142e <pattern_output.isra.0+0x7a>
    1436:	00 c0       	rjmp	.+0      	; 0x1438 <pattern_output.isra.0+0x84>
    1438:	00 00       	nop
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	f7 01       	movw	r30, r14
    143e:	09 95       	icall
    1440:	ff ef       	ldi	r31, 0xFF	; 255
    1442:	24 e3       	ldi	r18, 0x34	; 52
    1444:	8c e0       	ldi	r24, 0x0C	; 12
    1446:	f1 50       	subi	r31, 0x01	; 1
    1448:	20 40       	sbci	r18, 0x00	; 0
    144a:	80 40       	sbci	r24, 0x00	; 0
    144c:	e1 f7       	brne	.-8      	; 0x1446 <pattern_output.isra.0+0x92>
    144e:	00 c0       	rjmp	.+0      	; 0x1450 <pattern_output.isra.0+0x9c>
    1450:	00 00       	nop
    1452:	bb cf       	rjmp	.-138    	; 0x13ca <pattern_output.isra.0+0x16>
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	1f 91       	pop	r17
    145a:	0f 91       	pop	r16
    145c:	ff 90       	pop	r15
    145e:	ef 90       	pop	r14
    1460:	df 90       	pop	r13
    1462:	cf 90       	pop	r12
    1464:	08 95       	ret

00001466 <puzzle_rotor_reset>:
    1466:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <last_observed_rotor+0x1>
    146a:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <last_observed_rotor>
    146e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <rotor_count+0x1>
    1472:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <rotor_count>
    1476:	08 95       	ret

00001478 <puzzle_rotor_step>:
    1478:	9c 01       	movw	r18, r24
    147a:	e0 91 eb 00 	lds	r30, 0x00EB	; 0x8000eb <last_observed_rotor>
    147e:	f0 91 ec 00 	lds	r31, 0x00EC	; 0x8000ec <last_observed_rotor+0x1>
    1482:	cf 01       	movw	r24, r30
    1484:	01 96       	adiw	r24, 0x01	; 1
    1486:	64 e0       	ldi	r22, 0x04	; 4
    1488:	70 e0       	ldi	r23, 0x00	; 0
    148a:	ee d0       	rcall	.+476    	; 0x1668 <__divmodhi4>
    148c:	82 17       	cp	r24, r18
    148e:	93 07       	cpc	r25, r19
    1490:	51 f4       	brne	.+20     	; 0x14a6 <puzzle_rotor_step+0x2e>
    1492:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <rotor_count>
    1496:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <rotor_count+0x1>
    149a:	01 96       	adiw	r24, 0x01	; 1
    149c:	90 93 ea 00 	sts	0x00EA, r25	; 0x8000ea <rotor_count+0x1>
    14a0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <rotor_count>
    14a4:	07 c0       	rjmp	.+14     	; 0x14b4 <puzzle_rotor_step+0x3c>
    14a6:	e2 17       	cp	r30, r18
    14a8:	f3 07       	cpc	r31, r19
    14aa:	21 f0       	breq	.+8      	; 0x14b4 <puzzle_rotor_step+0x3c>
    14ac:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <rotor_count+0x1>
    14b0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <rotor_count>
    14b4:	30 93 ec 00 	sts	0x00EC, r19	; 0x8000ec <last_observed_rotor+0x1>
    14b8:	20 93 eb 00 	sts	0x00EB, r18	; 0x8000eb <last_observed_rotor>
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	20 91 e9 00 	lds	r18, 0x00E9	; 0x8000e9 <rotor_count>
    14c2:	30 91 ea 00 	lds	r19, 0x00EA	; 0x8000ea <rotor_count+0x1>
    14c6:	20 31       	cpi	r18, 0x10	; 16
    14c8:	31 05       	cpc	r19, r1
    14ca:	0c f4       	brge	.+2      	; 0x14ce <puzzle_rotor_step+0x56>
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	08 95       	ret

000014d0 <puzzle_rotor_solved>:
}

void puzzle_rotor_solved(void(*led_cb)(char),void(*delay_ms_cb)(unsigned long))
{
    char *out = "QMIT";
    pattern_output(led_cb,delay_ms_cb,out);
    14d0:	63 e6       	ldi	r22, 0x63	; 99
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	6f cf       	rjmp	.-290    	; 0x13b4 <pattern_output.isra.0>

000014d6 <puzzle_temp_solved>:
}

void puzzle_temp_solved(void(*led_cb)(char),void(*delay_ms_cb)(unsigned long))
{
    char *out = "L6MV";
    pattern_output(led_cb,delay_ms_cb,out);
    14d6:	68 e6       	ldi	r22, 0x68	; 104
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	6c cf       	rjmp	.-296    	; 0x13b4 <pattern_output.isra.0>

000014dc <init_timer_isr>:
============================================================================*/
void init_timer_isr( void )
{
   /*  set timer compare value (how often timer ISR will fire set to 1 ms timer interrupt) */

   OCR0A = ( TICKS_PER_MS * QT_TIMER_PERIOD_MSEC);
    14dc:	8f e3       	ldi	r24, 0x3F	; 63
    14de:	86 bf       	out	0x36, r24	; 54

   /*  enable timer ISR on compare A */
   TIMSK0 |= ( 1 << OCIE0A );
    14e0:	89 b7       	in	r24, 0x39	; 57
    14e2:	82 60       	ori	r24, 0x02	; 2
    14e4:	89 bf       	out	0x39, r24	; 57
   /*  timer prescaler = system clock / 64  */
   TCCR0B |= (1 << CS01) | (1 << CS00);
    14e6:	83 b7       	in	r24, 0x33	; 51
    14e8:	83 60       	ori	r24, 0x03	; 3
    14ea:	83 bf       	out	0x33, r24	; 51
   /*  timer mode = CTC (count up to compare value, then reset)    */
   TCCR0A |= (1 << WGM01);
    14ec:	80 b7       	in	r24, 0x30	; 48
    14ee:	82 60       	ori	r24, 0x02	; 2
    14f0:	80 bf       	out	0x30, r24	; 48
    14f2:	08 95       	ret

000014f4 <__vector_9>:
Input   :   n/a
Output  :   n/a
Notes   :
============================================================================*/
ISR(TIM0_COMPA_vect)
{
    14f4:	1f 92       	push	r1
    14f6:	0f 92       	push	r0
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	0f 92       	push	r0
    14fc:	11 24       	eor	r1, r1
    14fe:	2f 93       	push	r18
    1500:	3f 93       	push	r19
    1502:	4f 93       	push	r20
    1504:	5f 93       	push	r21
    1506:	6f 93       	push	r22
    1508:	7f 93       	push	r23
    150a:	8f 93       	push	r24
    150c:	9f 93       	push	r25
    150e:	af 93       	push	r26
  {
    gMsTimeout--;
  }
  #endif

  time_ms_inc += QT_TIMER_PERIOD_MSEC;
    1510:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <time_ms_inc>
    1514:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <time_ms_inc+0x1>
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <time_ms_inc+0x1>
    151e:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <time_ms_inc>

  if(time_ms_inc >= qt_measurement_period_msec)
    1522:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <qt_measurement_period_msec>
    1526:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <qt_measurement_period_msec+0x1>
    152a:	82 17       	cp	r24, r18
    152c:	93 07       	cpc	r25, r19
    152e:	38 f0       	brcs	.+14     	; 0x153e <__vector_9+0x4a>
  {
    time_ms_inc =0;
    1530:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <time_ms_inc+0x1>
    1534:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <time_ms_inc>
    /*  set flag: it's time to measure touch    */
    time_to_measure_touch = 1u;
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <time_to_measure_touch>
  else
  {

  }
  /*  update the current time */
   current_time_ms_touch += QT_TIMER_PERIOD_MSEC;
    153e:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <current_time_ms_touch>
    1542:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <current_time_ms_touch+0x1>
    1546:	01 96       	adiw	r24, 0x01	; 1
    1548:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <current_time_ms_touch+0x1>
    154c:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <current_time_ms_touch>
   current_time += QT_TIMER_PERIOD_MSEC;
    1550:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <current_time>
    1554:	30 91 dd 00 	lds	r19, 0x00DD	; 0x8000dd <current_time+0x1>
    1558:	40 91 de 00 	lds	r20, 0x00DE	; 0x8000de <current_time+0x2>
    155c:	50 91 df 00 	lds	r21, 0x00DF	; 0x8000df <current_time+0x3>
    1560:	60 91 e0 00 	lds	r22, 0x00E0	; 0x8000e0 <current_time+0x4>
    1564:	70 91 e1 00 	lds	r23, 0x00E1	; 0x8000e1 <current_time+0x5>
    1568:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <current_time+0x6>
    156c:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <current_time+0x7>
    1570:	a1 e0       	ldi	r26, 0x01	; 1
    1572:	c4 d0       	rcall	.+392    	; 0x16fc <__adddi3_s8>
    1574:	20 93 dc 00 	sts	0x00DC, r18	; 0x8000dc <current_time>
    1578:	30 93 dd 00 	sts	0x00DD, r19	; 0x8000dd <current_time+0x1>
    157c:	40 93 de 00 	sts	0x00DE, r20	; 0x8000de <current_time+0x2>
    1580:	50 93 df 00 	sts	0x00DF, r21	; 0x8000df <current_time+0x3>
    1584:	60 93 e0 00 	sts	0x00E0, r22	; 0x8000e0 <current_time+0x4>
    1588:	70 93 e1 00 	sts	0x00E1, r23	; 0x8000e1 <current_time+0x5>
    158c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <current_time+0x6>
    1590:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <current_time+0x7>
}
    1594:	af 91       	pop	r26
    1596:	9f 91       	pop	r25
    1598:	8f 91       	pop	r24
    159a:	7f 91       	pop	r23
    159c:	6f 91       	pop	r22
    159e:	5f 91       	pop	r21
    15a0:	4f 91       	pop	r20
    15a2:	3f 91       	pop	r19
    15a4:	2f 91       	pop	r18
    15a6:	0f 90       	pop	r0
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	0f 90       	pop	r0
    15ac:	1f 90       	pop	r1
    15ae:	18 95       	reti

000015b0 <init_system>:
Purpose :   initialise host app, pins, watchdog, etc
============================================================================*/
void init_system( void )
{
    /*  run at 4MHz (assuming internal clock is set to 8MHz)*/
    CLKPR = 0x80u;
    15b0:	80 e8       	ldi	r24, 0x80	; 128
    15b2:	86 bd       	out	0x26, r24	; 38
    CLKPR = 0x01u;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	86 bd       	out	0x26, r24	; 38

    /*  disable pull-ups    */
    MCUCR |= (1u << PUD);
    15b8:	85 b7       	in	r24, 0x35	; 53
    15ba:	80 64       	ori	r24, 0x40	; 64
    15bc:	85 bf       	out	0x35, r24	; 53
    15be:	08 95       	ret

000015c0 <touch_init>:
Output  :   n/a
Notes   :
============================================================================*/

void touch_init( void )
{
    15c0:	cf 92       	push	r12
    15c2:	ef 92       	push	r14
    15c4:	0f 93       	push	r16
#define SNS1	A
#define SNSK1	A


	#ifdef QTOUCH_STUDIO_MASKS
	SNS_array[0][0]= 0x45;
    15c6:	ee eb       	ldi	r30, 0xBE	; 190
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	85 e4       	ldi	r24, 0x45	; 69
    15cc:	80 83       	st	Z, r24
	SNS_array[0][1]= 0x0;
    15ce:	11 82       	std	Z+1, r1	; 0x01
	SNS_array[1][0]= 0x0;
    15d0:	12 82       	std	Z+2, r1	; 0x02
	SNS_array[1][1]= 0x0;
    15d2:	13 82       	std	Z+3, r1	; 0x03

	SNSK_array[0][0]= 0x8a;
    15d4:	ea eb       	ldi	r30, 0xBA	; 186
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	8a e8       	ldi	r24, 0x8A	; 138
    15da:	80 83       	st	Z, r24
	SNSK_array[0][1]= 0x0;
    15dc:	11 82       	std	Z+1, r1	; 0x01
	SNSK_array[1][0]= 0x0;
    15de:	12 82       	std	Z+2, r1	; 0x02
	SNSK_array[1][1]= 0x0;
    15e0:	13 82       	std	Z+3, r1	; 0x03
Output  :   n/a
Notes   :   Generated code from QTouch Studio. Do not change
============================================================================*/
static void config_sensors(void)
{
	qt_enable_rotor( CHANNEL_0, CHANNEL_2, NO_AKS_GROUP, 10u, HYST_25, RES_8_BIT, 0u );
    15e2:	c1 2c       	mov	r12, r1
    15e4:	87 e0       	ldi	r24, 0x07	; 7
    15e6:	e8 2e       	mov	r14, r24
    15e8:	01 e0       	ldi	r16, 0x01	; 1
    15ea:	2a e0       	ldi	r18, 0x0A	; 10
    15ec:	40 e0       	ldi	r20, 0x00	; 0
    15ee:	62 e0       	ldi	r22, 0x02	; 2
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	32 db       	rcall	.-2460   	; 0xc58 <qt_enable_rotor>

    /* Configure the Sensors as keys or Keys With Rotor/Sliders in this function */
    config_sensors();

    /* initialise touch sensing */
    qt_init_sensing();
    15f4:	60 e0       	ldi	r22, 0x00	; 0
    15f6:	70 e0       	ldi	r23, 0x00	; 0
    15f8:	8f e6       	ldi	r24, 0x6F	; 111
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	42 d6       	rcall	.+3204   	; 0x2282 <__TEXT_REGION_LENGTH__+0x282>

static void qt_set_parameters( void )
{

/*  This will be modified by the user to different values   */
qt_config_data.qt_di              = 4;
    15fe:	e9 e8       	ldi	r30, 0x89	; 137
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	84 e0       	ldi	r24, 0x04	; 4
    1604:	81 83       	std	Z+1, r24	; 0x01
qt_config_data.qt_neg_drift_rate  = 20;
    1606:	84 e1       	ldi	r24, 0x14	; 20
    1608:	84 83       	std	Z+4, r24	; 0x04
qt_config_data.qt_pos_drift_rate  = 5;
    160a:	95 e0       	ldi	r25, 0x05	; 5
    160c:	95 83       	std	Z+5, r25	; 0x05
qt_config_data.qt_max_on_duration = 0;
    160e:	13 82       	std	Z+3, r1	; 0x03
qt_config_data.qt_drift_hold_time = 20;
    1610:	82 83       	std	Z+2, r24	; 0x02
qt_config_data.qt_recal_threshold = 1;
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	80 83       	st	Z, r24
qt_config_data.qt_pos_recal_delay = 10;
    1616:	8a e0       	ldi	r24, 0x0A	; 10
    1618:	86 83       	std	Z+6, r24	; 0x06
    *   but before it has processed them. The user can use this hook to apply filter
    *   functions to the measured signal values.(Possibly to fix sensor layout faults)    */
       #ifdef _DEBUG_INTERFACE_
            qt_filter_callback = &set_timestamp1;
       #else
            qt_filter_callback = 0;
    161a:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <qt_filter_callback+0x1>
    161e:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <qt_filter_callback>

    /* Process commands from PC */
    QDebug_ProcessCommands();
#endif

}
    1622:	0f 91       	pop	r16
    1624:	ef 90       	pop	r14
    1626:	cf 90       	pop	r12
    1628:	08 95       	ret

0000162a <touch_measure>:

	/*status flags to indicate the re-burst for library*/
    static uint16_t status_flag = 0u;
    static uint16_t burst_flag = 0u;

	  if( time_to_measure_touch )
    162a:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <time_to_measure_touch>
    162e:	88 23       	and	r24, r24
    1630:	49 f0       	breq	.+18     	; 0x1644 <touch_measure+0x1a>
        {

            /*  clear flag: it's time to measure touch  */
            time_to_measure_touch = 0u;
    1632:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <time_to_measure_touch>
				#ifdef _DEBUG_INTERFACE_
				    TIMESTAMP0;
				#endif

                /*  one time measure touch sensors    */
                status_flag = qt_measure_sensors( current_time_ms_touch );
    1636:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <current_time_ms_touch>
    163a:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <current_time_ms_touch+0x1>
    163e:	74 d6       	rcall	.+3304   	; 0x2328 <__TEXT_REGION_LENGTH__+0x328>
			        TIMESTAMP3;
			    #endif

                /* Time-critical host application code goes here */

            }while (burst_flag) ;
    1640:	90 fd       	sbrc	r25, 0
    1642:	f9 cf       	rjmp	.-14     	; 0x1636 <touch_measure+0xc>
    1644:	08 95       	ret

00001646 <__mulhi3>:
    1646:	00 24       	eor	r0, r0
    1648:	55 27       	eor	r21, r21
    164a:	04 c0       	rjmp	.+8      	; 0x1654 <__mulhi3+0xe>
    164c:	08 0e       	add	r0, r24
    164e:	59 1f       	adc	r21, r25
    1650:	88 0f       	add	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	00 97       	sbiw	r24, 0x00	; 0
    1656:	29 f0       	breq	.+10     	; 0x1662 <__mulhi3+0x1c>
    1658:	76 95       	lsr	r23
    165a:	67 95       	ror	r22
    165c:	b8 f3       	brcs	.-18     	; 0x164c <__mulhi3+0x6>
    165e:	71 05       	cpc	r23, r1
    1660:	b9 f7       	brne	.-18     	; 0x1650 <__mulhi3+0xa>
    1662:	80 2d       	mov	r24, r0
    1664:	95 2f       	mov	r25, r21
    1666:	08 95       	ret

00001668 <__divmodhi4>:
    1668:	97 fb       	bst	r25, 7
    166a:	07 2e       	mov	r0, r23
    166c:	16 f4       	brtc	.+4      	; 0x1672 <__divmodhi4+0xa>
    166e:	00 94       	com	r0
    1670:	06 d0       	rcall	.+12     	; 0x167e <__divmodhi4_neg1>
    1672:	77 fd       	sbrc	r23, 7
    1674:	08 d0       	rcall	.+16     	; 0x1686 <__divmodhi4_neg2>
    1676:	57 d0       	rcall	.+174    	; 0x1726 <__udivmodhi4>
    1678:	07 fc       	sbrc	r0, 7
    167a:	05 d0       	rcall	.+10     	; 0x1686 <__divmodhi4_neg2>
    167c:	3e f4       	brtc	.+14     	; 0x168c <__divmodhi4_exit>

0000167e <__divmodhi4_neg1>:
    167e:	90 95       	com	r25
    1680:	81 95       	neg	r24
    1682:	9f 4f       	sbci	r25, 0xFF	; 255
    1684:	08 95       	ret

00001686 <__divmodhi4_neg2>:
    1686:	70 95       	com	r23
    1688:	61 95       	neg	r22
    168a:	7f 4f       	sbci	r23, 0xFF	; 255

0000168c <__divmodhi4_exit>:
    168c:	08 95       	ret

0000168e <__prologue_saves__>:
    168e:	2f 92       	push	r2
    1690:	3f 92       	push	r3
    1692:	4f 92       	push	r4
    1694:	5f 92       	push	r5
    1696:	6f 92       	push	r6
    1698:	7f 92       	push	r7
    169a:	8f 92       	push	r8
    169c:	9f 92       	push	r9
    169e:	af 92       	push	r10
    16a0:	bf 92       	push	r11
    16a2:	cf 92       	push	r12
    16a4:	df 92       	push	r13
    16a6:	ef 92       	push	r14
    16a8:	ff 92       	push	r15
    16aa:	0f 93       	push	r16
    16ac:	1f 93       	push	r17
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	ca 1b       	sub	r28, r26
    16b8:	db 0b       	sbc	r29, r27
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	f8 94       	cli
    16be:	de bf       	out	0x3e, r29	; 62
    16c0:	0f be       	out	0x3f, r0	; 63
    16c2:	cd bf       	out	0x3d, r28	; 61
    16c4:	09 94       	ijmp

000016c6 <__epilogue_restores__>:
    16c6:	2a 88       	ldd	r2, Y+18	; 0x12
    16c8:	39 88       	ldd	r3, Y+17	; 0x11
    16ca:	48 88       	ldd	r4, Y+16	; 0x10
    16cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    16ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    16d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    16d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    16d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    16d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    16d8:	b9 84       	ldd	r11, Y+9	; 0x09
    16da:	c8 84       	ldd	r12, Y+8	; 0x08
    16dc:	df 80       	ldd	r13, Y+7	; 0x07
    16de:	ee 80       	ldd	r14, Y+6	; 0x06
    16e0:	fd 80       	ldd	r15, Y+5	; 0x05
    16e2:	0c 81       	ldd	r16, Y+4	; 0x04
    16e4:	1b 81       	ldd	r17, Y+3	; 0x03
    16e6:	aa 81       	ldd	r26, Y+2	; 0x02
    16e8:	b9 81       	ldd	r27, Y+1	; 0x01
    16ea:	ce 0f       	add	r28, r30
    16ec:	d1 1d       	adc	r29, r1
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	cd bf       	out	0x3d, r28	; 61
    16f8:	ed 01       	movw	r28, r26
    16fa:	08 95       	ret

000016fc <__adddi3_s8>:
    16fc:	00 24       	eor	r0, r0
    16fe:	a7 fd       	sbrc	r26, 7
    1700:	00 94       	com	r0
    1702:	2a 0f       	add	r18, r26
    1704:	30 1d       	adc	r19, r0
    1706:	40 1d       	adc	r20, r0
    1708:	50 1d       	adc	r21, r0
    170a:	60 1d       	adc	r22, r0
    170c:	70 1d       	adc	r23, r0
    170e:	80 1d       	adc	r24, r0
    1710:	90 1d       	adc	r25, r0
    1712:	08 95       	ret

00001714 <__subdi3>:
    1714:	2a 19       	sub	r18, r10
    1716:	3b 09       	sbc	r19, r11
    1718:	4c 09       	sbc	r20, r12
    171a:	5d 09       	sbc	r21, r13
    171c:	6e 09       	sbc	r22, r14
    171e:	7f 09       	sbc	r23, r15
    1720:	80 0b       	sbc	r24, r16
    1722:	91 0b       	sbc	r25, r17
    1724:	08 95       	ret

00001726 <__udivmodhi4>:
    1726:	aa 1b       	sub	r26, r26
    1728:	bb 1b       	sub	r27, r27
    172a:	51 e1       	ldi	r21, 0x11	; 17
    172c:	07 c0       	rjmp	.+14     	; 0x173c <__udivmodhi4_ep>

0000172e <__udivmodhi4_loop>:
    172e:	aa 1f       	adc	r26, r26
    1730:	bb 1f       	adc	r27, r27
    1732:	a6 17       	cp	r26, r22
    1734:	b7 07       	cpc	r27, r23
    1736:	10 f0       	brcs	.+4      	; 0x173c <__udivmodhi4_ep>
    1738:	a6 1b       	sub	r26, r22
    173a:	b7 0b       	sbc	r27, r23

0000173c <__udivmodhi4_ep>:
    173c:	88 1f       	adc	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	5a 95       	dec	r21
    1742:	a9 f7       	brne	.-22     	; 0x172e <__udivmodhi4_loop>
    1744:	80 95       	com	r24
    1746:	90 95       	com	r25
    1748:	bc 01       	movw	r22, r24
    174a:	cd 01       	movw	r24, r26
    174c:	08 95       	ret

0000174e <_exit>:
    174e:	f8 94       	cli

00001750 <__stop_program>:
    1750:	ff cf       	rjmp	.-2      	; 0x1750 <__stop_program>
